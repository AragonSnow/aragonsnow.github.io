<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IBMCloud部署OneList-Go</title>
      <link href="/2020/01/11/IBMCloud%E9%83%A8%E7%BD%B2OneList-Go/"/>
      <url>/2020/01/11/IBMCloud%E9%83%A8%E7%BD%B2OneList-Go/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>原来的<a href="">Onelist</a>已经失效，Moeclub大佬用Go 语言重写了OneList项目，感谢大佬~<br><br> <a href="https://github.com/MoeClub/OneList/tree/master/Rewrite" target="_blank" rel="noopener">OneList - Written in GoLang</a><br></p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><a href="https://onelist-cf.us-south.cf.appdomain.cloud/" target="_blank" rel="noopener">https://onelist-cf.us-south.cf.appdomain.cloud/</a></p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol><li>IBMCloud账号</li><li>电脑</li><li>动手能力,默认你是使用过CMD，git,IBMcloud的人</li></ol><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><h3 id="通过下面URL登录-右键新标签打开"><a href="#通过下面URL登录-右键新标签打开" class="headerlink" title="通过下面URL登录 (右键新标签打开)"></a>通过下面URL登录 (右键新标签打开)</h3><h4 id="国际版-个人版-家庭版"><a href="#国际版-个人版-家庭版" class="headerlink" title="国际版, 个人版(家庭版)"></a>国际版, 个人版(家庭版)</h4><p><a href="https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=78d4dc35-7e46-42c6-9023-2d39314433a5&amp;response_type=code&amp;redirect_uri=http://localhost/onedrive-login&amp;response_mode=query&amp;scope=offline_access%20User.Read%20Files.ReadWrite.All" target="_blank" rel="noopener">https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=78d4dc35-7e46-42c6-9023-2d39314433a5&amp;response_type=code&amp;redirect_uri=http://localhost/onedrive-login&amp;response_mode=query&amp;scope=offline_access%20User.Read%20Files.ReadWrite.All</a></p><h4 id="中国版-世纪互联"><a href="#中国版-世纪互联" class="headerlink" title="中国版(世纪互联)"></a>中国版(世纪互联)</h4><p><a href="https://login.chinacloudapi.cn/common/oauth2/v2.0/authorize?client_id=dfe36e60-6133-48cf-869f-4d15b8354769&amp;response_type=code&amp;redirect_uri=http://localhost/onedrive-login&amp;response_mode=query&amp;scope=offline_access%20User.Read%20Files.ReadWrite.All" target="_blank" rel="noopener">https://login.chinacloudapi.cn/common/oauth2/v2.0/authorize?client_id=dfe36e60-6133-48cf-869f-4d15b8354769&amp;response_type=code&amp;redirect_uri=http://localhost/onedrive-login&amp;response_mode=query&amp;scope=offline_access%20User.Read%20Files.ReadWrite.All</a></p><p>打开登陆账号，授权应用，<font color="red">然后会提示找不页面，不用管，先记下浏览器里面的链接</font><br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/01/11/BdxR5eHZa6AM3qV.png" alt="01.PNG" title="">                </div>                <div class="image-caption">01.PNG</div>            </figure><p></p><h2 id="生成配置"><a href="#生成配置" class="headerlink" title="生成配置"></a>生成配置</h2><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p>git clone <a href="https://github.com/AragonSnow/onelist-go-cf.git" target="_blank" rel="noopener">https://github.com/AragonSnow/onelist-go-cf.git</a></p><br>或者 下载压缩包后解压<br><br><br>### 配置<br>CMD切换到工程所在路径后输入：<br><br><p>根目录挂载: onelist -a “刚获取的授权URL” -s “/“</p><br><p>多盘挂载1: onelist -a “刚获取的授权URL” -s “/网盘1”<br><br>多盘挂载2: onelist -a “刚获取的授权URL” -s “/网盘2”</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/01/11/ivFc8O4eTBYwVHb.png" alt="02.PNG" title="">                </div>                <div class="image-caption">02.PNG</div>            </figure><p>显示 Success表示成功，此时可以看到工程目录下多了一个config.json文件<br>此时可以输入,查看生成的效果:</p><p></p><p>根目录挂载: onelist -bind 0.0.0.0 -port 5000</p><br>会出现提示[cache]的代表在获取信息，此时打卡会显示404 Not Found,需要Cache生成完才能看到文件<p></p><h2 id="IBMCloud部署"><a href="#IBMCloud部署" class="headerlink" title="IBMCloud部署"></a>IBMCloud部署</h2><h3 id="创建程序"><a href="#创建程序" class="headerlink" title="创建程序"></a>创建程序</h3><p>需要创建一个PHP的CF程序和Git仓库，这里就不展开，请参考：<br><br><a href="https://hexo.aragon.wang/2019/12/14/IBMCLoud-Cloud-Foundry-%E9%83%A8%E7%BD%B2Oneindex%E6%95%99%E7%A8%8B/">IBMCLoud(Cloud Foundry) 部署Oneindex教程</a><br></p><p>需要克隆的Git仓库换为：<br><a href="https://github.com/AragonSnow/onelist-go-cf" target="_blank" rel="noopener">https://github.com/AragonSnow/onelist-go-cf</a><br></p><h3 id="修改Git"><a href="#修改Git" class="headerlink" title="修改Git"></a>修改Git</h3><p>进入Git后需要修改两个文件</p><h4 id="manifest-yml"><a href="#manifest-yml" class="headerlink" title="manifest.yml"></a>manifest.yml</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/01/11/cSsuMHmE7W8QC6z.png" alt="03.PNG" title="">                </div>                <div class="image-caption">03.PNG</div>            </figure><p>将manifest.yml中的onelist-cf 全部修改为你对应的程序名</p><h4 id="config-json"><a href="#config-json" class="headerlink" title="config.json"></a>config.json</h4><p>将刚刚生成的config.json文件上传到IBMCloud的git路径</p><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>修改完Git后是会自动启动的，如果设置了手动请手动启动。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="如何加密文件夹"><a href="#如何加密文件夹" class="headerlink" title="如何加密文件夹"></a>如何加密文件夹</h3><p>比如想加密的路径为<a href="https://onelist-cf.us-south.cf.appdomain.cloud/av/精神食粮" target="_blank" rel="noopener">https://onelist-cf.us-south.cf.appdomain.cloud/av/精神食粮</a><br>配置方法如下：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/01/11/D4NUR3tGwbJVxB6.png" alt="04.PNG" title="">                </div>                <div class="image-caption">04.PNG</div>            </figure><p></p><p></p><p>“SubPath”: “/av” 对应 链接中的av 路径<br><br>“AuthPath”: “/教育资料?usrname:passwd|/精神食粮?usrname:passwd”<br><br>/教育资料 表示加密/av/教育资料 路径<br><br>usrname:passwd 对应用户名和密码</p><br><p></p><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><p>所以需要配合IBM Cli实现自动重启，请参考这篇文章。<br><br><a href="https://hexo.aragon.wang/2019/08/28/IBMCloud%E9%83%A8%E7%BD%B2onelist%E4%B8%80%E7%9B%B4%E8%AF%95%E7%94%A8%E6%95%99%E7%A8%8B/">IBMCloud部署onelist一直试用教程</a><br><br>IBMCloud的CF自动重启平台还在搭建中。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 白嫖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
            <tag> ibmcloud </tag>
            
            <tag> onelist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IBMCloud搭建qiandao平台</title>
      <link href="/2020/01/10/IBMCloud%E6%90%AD%E5%BB%BAqiandao%E5%B9%B3%E5%8F%B0/"/>
      <url>/2020/01/10/IBMCloud%E6%90%AD%E5%BB%BAqiandao%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p><a href="https://github.com/binux/qiandao" target="_blank" rel="noopener">签到 https://qiandao.today/</a> 自动化实现签到功能。<br><br>IBMCloud 邮箱注册即可使用，人手一个自建签到平台不是梦。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol><li>IBMCloud 账号</li><li>一定的动手能力</li></ol><h1 id="MySQL-账号申请"><a href="#MySQL-账号申请" class="headerlink" title="MySQL 账号申请"></a>MySQL 账号申请</h1><p>这里使用免费的DB4fDree.net, 仅适用于测试环境，注重安全的用户请按 Ctrl+w 退出本页面。<br></p><p><font size="5"><a href="https://www.db4free.net/signup.php" target="_blank" rel="noopener">注册DB4fDree</a></font><br><br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/01/10/IiRcH8rbNpJEolw.png" alt="1.PNG" title="">                </div>                <div class="image-caption">1.PNG</div>            </figure><br><br>注册完以后，记下用户名密码，数据库名称,后面后需要用到的地方<p></p><h1 id="IBMCloud-部署"><a href="#IBMCloud-部署" class="headerlink" title="IBMCloud 部署"></a>IBMCloud 部署</h1><p>注册过程略过，项目创建过程参考这篇<a href="https://hexo.aragon.wang/2019/12/14/IBMCLoud-Cloud-Foundry-%E9%83%A8%E7%BD%B2Oneindex%E6%95%99%E7%A8%8B/">文章</a>前部分的内容，创建一个<font color="red">python</font>的工程<br><br><a href="https://hexo.aragon.wang/2019/12/14/IBMCLoud-Cloud-Foundry-%E9%83%A8%E7%BD%B2Oneindex%E6%95%99%E7%A8%8B/">IBMCLoud(Cloud Foundry) 部署Oneindex教程</a><br><br>项目创建完成,我们需要clone和定制内容。</p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>等待一段时间以后，创建完成。点击左边的概述，再点击 启动 开始连续交付<br><br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/BKUtnRFjaufTxVd.png" alt="4.PNG" title="">                </div>                <div class="image-caption">4.PNG</div>            </figure><br><br>切换到 ”delibery pipeline“, 点击 创建 确定后创建密钥<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/iZ87pBak9FnGSoR.png" alt="5.PNG" title="">                </div>                <div class="image-caption">5.PNG</div>            </figure><br><br>切换到 ”git存储和问题追踪“，存储库类型选择 克隆 ，github链接为：<br><br><a href="https://github.com/AragonSnow/qiandao-cf" target="_blank" rel="noopener">https://github.com/AragonSnow/qiandao-cf</a><br><br>取消 ”启用问题“和 ”跟踪代码更改部署“,将仓库设为私人的，防止别人看到你账号密码。<br><br>最后点击左上角完成创建<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/7Ci4UFAm9JqjwN3.png" alt="6.PNG" title="">                </div>                <div class="image-caption">6.PNG</div>            </figure><br><p></p><p>返回IBMcloud,打开概述，点击查看工具链，点击GIT<br><br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/MYpTNEnDmcaAvZX.png" alt="9.PNG" title="">                </div>                <div class="image-caption">9.PNG</div>            </figure><br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/aeyCXiNEU7oAOBj.png" alt="10.PNG" title="">                </div>                <div class="image-caption">10.PNG</div>            </figure><br><br>需要修改两个文件，第一个：manifest.yml<br><br>点击manifest.yml文件打开，点击右边 Edit 修改成对应的项目名，比如我之前创建的qiandao-cf, 最后点击下方的Commit 按钮提交修改<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/01/10/NKORVyYWDF2deso.png" alt="2.PNG" title="">                </div>                <div class="image-caption">2.PNG</div>            </figure><br><br>第一个：config.py<br><br>修改为从DB4free.net上申请的信息。<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/01/10/whPiyHQCaTnKlDv.png" alt="3.PNG" title="">                </div>                <div class="image-caption">3.PNG</div>            </figure><br><p></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>修改提交完以后，此时打开网页应该会报500 错误，是因为数据库没有创建，此处需要将数据导入数据库。<br><br>登陆DB4free.net的phpmyadmin管理界面,选择SQL<br><br><a href="https://www.db4free.net/phpMyAdmin/index.php" target="_blank" rel="noopener">https://www.db4free.net/phpMyAdmin/index.php</a><br><br>用notepad++打开工程目录下的qiandao.sql,将所有的tiebasign 替换成你对应的数据库名称，比如我这里申请的qiandao_cf,并复制到SQL文本框里，点击执行。<br><br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/01/10/Heo9j3IqkTc6gdK.png" alt="4.PNG" title="">                </div>                <div class="image-caption">4.PNG</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/01/10/3r2YW1Cgo7SyvFL.png" alt="5.PNG" title="">                </div>                <div class="image-caption">5.PNG</div>            </figure><br>执行后，可能会报错，请无视，打开列表就可以看到数据库已经导入了。<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/01/10/5FfjupUMaB3kc1D.png" alt="6.PNG" title="">                </div>                <div class="image-caption">6.PNG</div>            </figure><p></p><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><p>以上步骤完成以后，网站就可以打开了，此时需要设置一个管理员。<br><br>先在部署的签到站注册一个账号，成功后，进入登陆DB4free.net的phpmyadmin管理界面。<br><br>打开数据库的user表，对应的邮箱的role值修改为admin,这样这个账号就是管理员了。 <br><br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/01/10/YlnSH3NhikZVWXD.png" alt="7.PNG" title="">                </div>                <div class="image-caption">7.PNG</div>            </figure><p></p><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><p>IBMCloud的CloudFoundry需要每10天重启一次，所以需要配合IBM Cli实现自动重启，请参考这篇文章。<br><br><a href="https://hexo.aragon.wang/2019/08/28/IBMCloud%E9%83%A8%E7%BD%B2onelist%E4%B8%80%E7%9B%B4%E8%AF%95%E7%94%A8%E6%95%99%E7%A8%8B/">IBMCloud部署onelist一直试用教程</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 白嫖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
            <tag> ibmcloud </tag>
            
            <tag> qiandao </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IBMCLoud(Cloud Foundry) 部署Oneindex教程</title>
      <link href="/2019/12/14/IBMCLoud-Cloud-Foundry-%E9%83%A8%E7%BD%B2Oneindex%E6%95%99%E7%A8%8B/"/>
      <url>/2019/12/14/IBMCLoud-Cloud-Foundry-%E9%83%A8%E7%BD%B2Oneindex%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>IBMCloud 使用邮箱注册即可使用 CloudFoundry 挂载 Oneindex,每月375GB流量，简单实用，白嫖方便。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>IBMCloud 注册账号，邮箱注册即可，地址：<br><br><a href="https://cloud.ibm.com/login" target="_blank" rel="noopener">https://cloud.ibm.com/login</a><br>OneDrive 账号，获取教程:<br><a href="https://saodaye.com/sharel/1951.html" target="_blank" rel="noopener">https://saodaye.com/sharel/1951.html</a></p><h1 id="部署教程"><a href="#部署教程" class="headerlink" title="部署教程"></a>部署教程</h1><h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h2><p>登陆账号成功后选择左边栏的的Cloud Foundry打开。<br><br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/dLvz8bTeYmuBtrZ.png" alt="1.PNG" title="">                </div>                <div class="image-caption">1.PNG</div>            </figure><br><br>选择公共的应用程序，点击创建<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/wHWDaTkGcKgI8Ns.png" alt="2.PNG" title="">                </div>                <div class="image-caption">2.PNG</div>            </figure><br><br>程序选择PHP,内存128M或者256M，这里可能会不出现免费选项，刷新一下就好<br><br>域一定要是”us-south.cf.appdomain.cloud”,其他的都被墙了<br><br>程序名必须使用不一样的，不然会报错。记住，这后面会用到。最后点击右侧创建<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/cQgKIDLiqlCfa8O.png" alt="3.PNG" title="">                </div>                <div class="image-caption">3.PNG</div>            </figure><br><br>等待一段时间以后，创建完成。点击左边的概述，再点击 启动 开始连续交付<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/BKUtnRFjaufTxVd.png" alt="4.PNG" title="">                </div>                <div class="image-caption">4.PNG</div>            </figure><br><br>切换到 ”delibery pipeline“, 点击 创建 确定后创建密钥<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/iZ87pBak9FnGSoR.png" alt="5.PNG" title="">                </div>                <div class="image-caption">5.PNG</div>            </figure><br><br>切换到 ”git存储和问题追踪“，存储库类型选择 克隆 ，github链接为：<br><br><a href="https://github.com/AragonSnow/oneindex-cf" target="_blank" rel="noopener">https://github.com/AragonSnow/oneindex-cf</a><br><br>取消 ”启用问题“和 ”跟踪代码更改部署“,将仓库设为私人的，防止别人看到你账号密码。<br><br>最后点击左上角完成创建<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/7Ci4UFAm9JqjwN3.png" alt="6.PNG" title="">                </div>                <div class="image-caption">6.PNG</div>            </figure><br><br>这些配置完成后，可以暂时退出IBMCloud,获取口令后再来重新使用。<p></p><h2 id="2-获取OneDrive口令"><a href="#2-获取OneDrive口令" class="headerlink" title="2. 获取OneDrive口令"></a>2. 获取OneDrive口令</h2><p>打开链接<a href="https://oneindex-gettoken.us-south.cf.appdomain.cloud/" target="_blank" rel="noopener">https://oneindex-gettoken.us-south.cf.appdomain.cloud/</a> 注册OneDrive APP<br><br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/osgDlvH93nu5Ym8.png" alt="7.PNG" title="">                </div>                <div class="image-caption">7.PNG</div>            </figure><br><br>如图获取到登陆使用的Secret 和 Client ID<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/7aIH1oJicbD4Twk.gif" alt="install.gif" title="">                </div>                <div class="image-caption">install.gif</div>            </figure><br><br>返回<a href="https://oneindex-gettoken.us-south.cf.appdomain.cloud/" target="_blank" rel="noopener">https://oneindex-gettoken.us-south.cf.appdomain.cloud/</a>，输入刚刚获取到的Secret 和 Client ID，等待页面返回Access_token和Refresh_Token,并记录下来<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/AejKvC5duGfLl1D.png" alt="8.PNG" title="">                </div>                <div class="image-caption">8.PNG</div>            </figure><br><br>以上就是获取口令的过程<p></p><h2 id="3-输入口令"><a href="#3-输入口令" class="headerlink" title="3. 输入口令"></a>3. 输入口令</h2><p>返回IBMcloud,打开概述，点击查看工具链，点击GIT<br><br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/MYpTNEnDmcaAvZX.png" alt="9.PNG" title="">                </div>                <div class="image-caption">9.PNG</div>            </figure><br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/aeyCXiNEU7oAOBj.png" alt="10.PNG" title="">                </div>                <div class="image-caption">10.PNG</div>            </figure><br><br>需要修改三个文件，第一个：manifest.yml<br><br>点击manifest.yml文件打开，点击右边 Edit 修改成对应的项目名，比如我之前创建的Oneindex-cf-sample, 最后点击下方的Commit 按钮提交修改<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/teRxLOwoAE2klIG.png" alt="11.PNG" title="">                </div>                <div class="image-caption">11.PNG</div>            </figure><br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/OcMNWHhyf85CBTo.png" alt="12.PNG" title="">                </div>                <div class="image-caption">12.PNG</div>            </figure><br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/rytiRJbYk5jwZXh.png" alt="13.PNG" title="">                </div>                <div class="image-caption">13.PNG</div>            </figure><br><br>在 /web/config目录下打开base.php，点击右边 Edit<br><br>site_name 是你的网站标题<br><br>password 是你后台登陆密码<br><br>password 是你后台登陆密码<br><br>client_secret 替换 之前获取的secret<br><br>client_id 替换 之前获取的Client ID<br><br>refresh_token 替换成 获取到的Refresh_token<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/L6K2RpsCJyMbnxv.png" alt="14.PNG" title="">                </div>                <div class="image-caption">14.PNG</div>            </figure><br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/YIMc2jzk8XDtNmE.png" alt="15.PNG" title="">                </div>                <div class="image-caption">15.PNG</div>            </figure><br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/jgtRZ2UCecWk1oL.png" alt="16.PNG" title="">                </div>                <div class="image-caption">16.PNG</div>            </figure><br><br>在 /web/config目录下打开token.php，点击右边 Edit<br><br>access_token 替换 之前获取的access_token<br><br>refresh_token 替换成 获取到的Refresh_token<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/d3y8hJIc5YXRtlD.png" alt="17.PNG" title="">                </div>                <div class="image-caption">17.PNG</div>            </figure><br><br>以上即可完成配置的修改<p></p><h2 id="4-打开网站"><a href="#4-打开网站" class="headerlink" title="4. 打开网站"></a>4. 打开网站</h2><p>等待5分钟左右，自动部署完成，返回点击访问网站URL即开打开网站。<br><br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/I7PWfmEG8reVubl.png" alt="18.PNG" title="">                </div>                <div class="image-caption">18.PNG</div>            </figure><br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/14/FR4UhQ7rKq5be2j.png" alt="19.PNG" title="">                </div>                <div class="image-caption">19.PNG</div>            </figure><br><p></p><p>以上就是IBMCloud 部署Oneindex的教程。谢谢观看，如果有问题请在博客下给我留言。</p><h1 id="无限试用"><a href="#无限试用" class="headerlink" title="无限试用"></a>无限试用</h1><p>参考之前的<a href="https://hexo.aragon.wang/2019/08/28/IBMCloud%E9%83%A8%E7%BD%B2onelist%E4%B8%80%E7%9B%B4%E8%AF%95%E7%94%A8%E6%95%99%E7%A8%8B/">IBMCloud部署onelist一直试用教程</a>使用VPS定时任务实现无限试用。<br>后期我会搭建重启平台供大家来实现无主机重启。</p><p>谢谢观看</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 白嫖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
            <tag> oneindex </tag>
            
            <tag> ibmcloud </tag>
            
            <tag> cloudfoundry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCP最新白嫖教程</title>
      <link href="/2019/10/14/GCP%E6%9C%80%E6%96%B0%E7%99%BD%E5%AB%96%E6%95%99%E7%A8%8B/"/>
      <url>/2019/10/14/GCP%E6%9C%80%E6%96%B0%E7%99%BD%E5%AB%96%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>GCP作为财大气粗的Google旗下的平台，会给新用户送300美金的一年额度供用户试用。因为薅羊毛的人太多了，导致删除添加结算管理员的方法已经失效。我无意中发现了新的破解方法，不知何时失效，且薅且珍惜吧</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>无非是用没开通过GCP的新账户或者没注册过的信用卡，这里选择新账户：</p><ol><li>没有开通过GCP的账户的Gmail账户(并夕夕等平台自行购买，3-6块一个吧)；</li><li>梯子，为了上GCP；</li><li>一张可以过验证的信用卡，至于那种能过，问就是不知道。</li></ol><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="1-登录GCP"><a href="#1-登录GCP" class="headerlink" title="1. 登录GCP"></a>1. 登录GCP</h2><p>最好试用Chrome无痕模式打开链接:<br><br><a href="https://console.cloud.google.com" target="_blank" rel="noopener">GCP 命令台 https://console.cloud.google.com</a><br><br>按照提示输入账号密码登录，注意要修改辅助邮箱为你自己的邮箱，还有修改密码</p><h2 id="2-填写信息试用"><a href="#2-填写信息试用" class="headerlink" title="2. 填写信息试用"></a>2. 填写信息试用</h2><p>第一次进入会让你选择地区，默认美国就好<br><br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/10/14/bfGtLOH7ZThuzdM.png" alt="1 首次登陆选择地区.PNG" title="">                </div>                <div class="image-caption">1 首次登陆选择地区.PNG</div>            </figure><br>左上角会显示试用邀请，点击了解详情<br><p></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/10/14/G1DIaMbkjr45PNi.png" alt="2 试用邀请.PNG" title="">                </div>                <div class="image-caption">2 试用邀请.PNG</div>            </figure><p>点击开始免费试用<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/10/14/2Yf31657Lg9OpNW.png" alt="3 免费试用.PNG" title="">                </div>                <div class="image-caption">3 免费试用.PNG</div>            </figure><p>地区选美国，勾选已阅读并同意条款 <del>(大概是人生中撒的最多的谎)</del>,点击继续<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/10/14/2Ye5AVNMWBF9bnh.png" alt="4 开始步骤 1.PNG" title="">                </div>                <div class="image-caption">4 开始步骤 1.PNG</div>            </figure><p>账户类型选择个人，信息使用美国地址生成器生成<br></p><p><a href="http://www.shenfendaquan.com/Index/index/custom_result" target="_blank" rel="noopener">美国地址生成器 http://www.shenfendaquan.com/Index/index/custom_result</a><br></p><p>复制粘贴进去即可<br><br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/10/14/ruY6H9L3DyoaOpB.png" alt="5 开始步骤 2.PNG" title="">                </div>                <div class="image-caption">5 开始步骤 2.PNG</div>            </figure><br>填写信用卡信息，用户名地址最好使用真实的信用卡信息避免验证不过<del>好像Google根本验证具体信息，反正我每次都这样填</del>，等待信用卡预授权结束<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/10/14/tDIPOxeH456LFzE.png" alt="6 开始步骤 3.PNG" title="">                </div>                <div class="image-caption">6 开始步骤 3.PNG</div>            </figure><p></p><p>这里先不添加成员，选择略过<br><br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/10/14/K8sZL9Xv7YP1JRQ.png" alt="7 开始步骤 4.PNG" title="">                </div>                <div class="image-caption">7 开始步骤 4.PNG</div>            </figure><br>点击左上角的账单，就能看到香喷喷的300刀一年试用额度到账，可以愉快的开始白嫖了,至于怎么利用VPS,不是本文重点,就不多赘述了。<br><p></p><font color="red">对于想无限续杯的朋友请继续往下看。</font><h1 id="无限续杯"><a href="#无限续杯" class="headerlink" title="无限续杯"></a>无限续杯</h1><p>进入账单 - 账户管理 - 添加一位账单管理员 将旧帐号填上， 为了防止填错账号，先不要删除现在的管理员，避免添加错账号。<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/10/14/ykEUcWN8zbYugQK.png" alt="8 无限续杯 1.PNG" title="">                </div>                <div class="image-caption">8 无限续杯 1.PNG</div>            </figure> <br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/10/14/nV6NtY5u2DORJcw.png" alt="9 无限续杯 2.PNG" title="">                </div>                <div class="image-caption">9 无限续杯 2.PNG</div>            </figure> <br><br><br>无痕模式打开chrome登陆旧账号，会提示就能看到有多个结算账号了，选择转至关联账号 <br><br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/10/14/YVfG2UxwrTtFb35.png" alt="10 无限续杯 3.PNG" title="">                </div>                <div class="image-caption">10 无限续杯 3.PNG</div>            </figure> <br><br><br>修改结算账号为刚开通的邮箱账号 <br><br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/10/15/V2qrkacwFIDHUyW.png" alt="13 无限续杯 6.PNG" title="">                </div>                <div class="image-caption">13 无限续杯 6.PNG</div>            </figure> <br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/10/15/5Kf1sNYuRiFhktX.png" alt="14 无限续杯 5.PNG" title="">                </div>                <div class="image-caption">14 无限续杯 5.PNG</div>            </figure> <br><br><br>进入账单 - 账户管理 - 更改结算账号，选择有钱能付款的账号，避免被反撸。<br><br><br>最后点击右上角显示用户信息面板，删除新账号的，只保留旧账号就可以了，这样，新账号里面的付款信息也会一并被删除。以上就是GCP无限续杯的教程，有什么问题就给我留言 <del>看我心情回复你</del> <br><br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/10/15/LMO3X5wmfPVSiZx.png" alt="16 无限续杯.PNG" title="">                </div>                <div class="image-caption">16 无限续杯.PNG</div>            </figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>薅羊毛最好不要广而告之，最后大家都没有好果汁吃</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 白嫖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无限续杯 </tag>
            
            <tag> GCP </tag>
            
            <tag> 白嫖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IBMCloud部署onelist一直试用教程</title>
      <link href="/2019/08/28/IBMCloud%E9%83%A8%E7%BD%B2onelist%E4%B8%80%E7%9B%B4%E8%AF%95%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/08/28/IBMCloud%E9%83%A8%E7%BD%B2onelist%E4%B8%80%E7%9B%B4%E8%AF%95%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>  IBMCloud 仅需邮箱注册一下账号就能得到一个虚拟空间，不过会在一段时间后自动停止运行，本教程主要是为了解决停止的问题</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>具体不多讲，参考教程：<br><br><a href="https://51.ruyo.net/12396.html" target="_blank" rel="noopener">OneList-最简洁的OneDrive目录索引部署教程</a></p><h1 id="不停机"><a href="#不停机" class="headerlink" title="不停机"></a>不停机</h1><p>部署完成后，只要重启就可以无限使用：</p><h2 id="部署IBMCloud-CLI"><a href="#部署IBMCloud-CLI" class="headerlink" title="部署IBMCloud CLI"></a>部署IBMCloud CLI</h2><p><code>sudo curl -sL https://ibm.biz/idt-installer | bash</code><br><br>等待自动部署完成</p><h2 id="生成IBMCloud-重启脚本"><a href="#生成IBMCloud-重启脚本" class="headerlink" title="生成IBMCloud 重启脚本"></a>生成IBMCloud 重启脚本</h2><p><code>nano ibmcloud.sh</code><br><br>复制以下内容</p><pre><code>#!/bin/shLogFile_path="/home/gc/ibmcloud.log"echo "===============================" &gt;&gt; $LogFile_pathecho `date +%Y-%m-%d-%H-%M-%S` &gt;&gt;  $LogFile_path/usr/local/bin/ibmcloud login -u IBMCloud账号 -p IBMCloud密码 -r 'us-south'  &gt;&gt;  $LogFile_path 2&gt;&amp;1 /usr/local/bin/ibmcloud target --cf-api 'https://api.ng.bluemix.net' -o IBMCloud账号 -s 'dev'  &gt;&gt;  $Lo$/usr/local/bin/ibmcloud cf restart Onelist部署时程序名 &gt;&gt;  $LogFile_path  2&gt;&amp;1</code></pre><p>修改其中的IBMCloud账号，IBMCloud密码，Onelist部署时程序名。按Ctrl+x 保存退出。</p><p>输入 <code>crontab -e</code>生成计划任务每天运行<br><br><code>01 4  *   *   *     bash /sh所在完整路径/ibmcloud.sh</code><br><br>路径需要自行修改。</p><p>可以修改进化运行时间来验证脚本运行情况。一切OK以后就可以愉快的白嫖了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 白嫖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
            <tag> ibmcloud </tag>
            
            <tag> onelist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Heroku部署oneindex教程</title>
      <link href="/2019/08/28/Heroku%E9%83%A8%E7%BD%B2oneindex%E6%95%99%E7%A8%8B/"/>
      <url>/2019/08/28/Heroku%E9%83%A8%E7%BD%B2oneindex%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>  当然是能白嫖啦！！！heroku 的免费套餐和白嫖来的Onedrive账号，使用OneIndex搭配出来成为免费的网盘系统，感觉不要太爽。<br><br>  PS: 目前网上的教程大多是使用关联Github后直接编译，结果是会无限初始化，本教程就是为了解决此问题才写的。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>1、VPS (安装了git)</li><li><p>2、注册Heroku的账号并安装了Heroku CLI</p><p>  <a href="https://www.jianshu.com/p/7bc34e56fa39" target="_blank" rel="noopener">Heroku 使用教程</a></p></li><li><p>3、一个Onedrive账号</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="1-安装PHP和Apache2"><a href="#1-安装PHP和Apache2" class="headerlink" title="1. 安装PHP和Apache2"></a>1. 安装PHP和Apache2</h2><p>以Ubuntu为例，登陆上VPS，输入：<br></p><pre><code>sudo apt install php php-curl apache2 git -y    # 安装oneindex 所需套件sudo service apache2 restart    #重启apache2git clone https://github.com/donwa/oneindexcd oneindex     # 下载oneindexsudo chown -R www-data:www-data cache   # 给与 Apache 读写权限sudo chown -R www-data:www-data configsudo ln -s /home/gc/oneindex /var/www/html/oneindex    #需要/home/gc 需要根据oneindex 所在路径进行修改</code></pre><p>然后访问vps ip/oneindex 就可以看到 Oneindex 绑定界面：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/08/28/kiUteYmbxw76L8a.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>看到全部是绿勾表示安装套件OK</p></li></ul><h2 id="2-初始化Oneindex"><a href="#2-初始化Oneindex" class="headerlink" title="2. 初始化Oneindex"></a>2. 初始化Oneindex</h2><p>过程不多说，参考作者说明: <a href="https://github.com/donwa/oneindex/blob/master/README.md" target="_blank" rel="noopener">Onindex 说明</a></p><h2 id="3-Heroku部署"><a href="#3-Heroku部署" class="headerlink" title="3. Heroku部署"></a>3. Heroku部署</h2><h3 id="3-0-安装-Heroku-CLI"><a href="#3-0-安装-Heroku-CLI" class="headerlink" title="3.0 安装 Heroku CLI"></a>3.0 安装 Heroku CLI</h3><p><code>sudo snap install --classic heroku</code></p><h3 id="3-1-登录heroku"><a href="#3-1-登录heroku" class="headerlink" title="3.1 登录heroku"></a>3.1 登录heroku</h3><p>VPS输入 <code>heroku login -i</code><br><br>根据提示注册的账号密码后使用</p><h3 id="3-2-创建-Heroku-项目"><a href="#3-2-创建-Heroku-项目" class="headerlink" title="3.2 创建 Heroku 项目"></a>3.2 创建 Heroku 项目</h3><p>在 <font color="red">Oneindex 目录下输入 </font><br><br><code>heroku creat APPNAME</code><br><br>APPNAME 如果被占用了就更换一个<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/08/28/TbIc6sjQEwoK9ZV.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p></p><h3 id="3-3-上传代码"><a href="#3-3-上传代码" class="headerlink" title="3.3 上传代码"></a>3.3 上传代码</h3><p>因为已经对Oneindex完成初始化了，所以直接上传到Heroku 即可<br><br><code>git push heroku master</code><br><br>没有报错登录上即可看到Oneindex部署完成：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/08/28/7gZ95eIM2mSHAjq.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>使用阿里云监访问可以避免停机。<br>Heroku的免费时间为550小时(22天)，添加信用卡后可以翻倍，有效白嫖。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 白嫖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
            <tag> OneIndex </tag>
            
            <tag> Heroku </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt 添加开机启动任务</title>
      <link href="/2019/08/26/OpenWrt-%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E4%BB%BB%E5%8A%A1/"/>
      <url>/2019/08/26/OpenWrt-%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>OpenWrt 添加启动任务的方式有别于其他的linux系统，在尝试过程中踩了不少坑，所以整理在此处。<br>正常Linux系统一般修改rc.local即可在开机时自动运行代码，即</p><p><code>vi /etc/rc.local</code></p><p>然后输入开机要启动的命令即可，但OpenWrt不同，其操作流程为：</p><ul><li>1 、进入启动任务的文件夹</li></ul><p><code>cd /etc/rc.d</code></p><ul><li>2、创建启动文件，前面要标注启动顺序</li></ul><p><code>vi S99Test</code></p><ul><li>3、键入“i”进入编辑模式输入内容</li></ul><pre><code> #!/bin/sh /etc/rc.common # 使用shell命令必须要有START=95 # 表示启动顺序排95，数字越大，启动越慢，可自行调整STOP=15 # 表示停止任务排15# 加启动任务start(){    #此处输入你要运行的命令，需要先验证命令是否可以正常运行}# 添加停止任务，如没必要可以不添加stop(){    #此处输入你要运行的命令，需要先验证命令是否可以正常运行}</code></pre><ul><li>4、按“ESC”退出编辑模式。键入“:wq”来保存内容并退出，此时在luci管理界-系统-启动项里面就能看到你刚添加的任务，可以输入reboot命令检验是否实现</li></ul><p>以上就是OpenWrt添加启动任务的方法</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 启动任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt 添加自定命令（以Frpc为例）</title>
      <link href="/2019/08/26/OpenWrt-%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E5%91%BD%E4%BB%A4%EF%BC%88%E4%BB%A5Frpc%E4%B8%BA%E4%BE%8B%EF%BC%89/"/>
      <url>/2019/08/26/OpenWrt-%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E5%91%BD%E4%BB%A4%EF%BC%88%E4%BB%A5Frpc%E4%B8%BA%E4%BE%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>OpenWrt 在使用过程中会出现需要添加自定义命令来提升效率，在一段时间摸索以后，我写了以下脚本来实现Frpc内网穿透的需求。<br>其他Linux系统均可以借鉴，但是文件位置可能稍有不同。</p><h1 id="1、创建shell脚本"><a href="#1、创建shell脚本" class="headerlink" title="1、创建shell脚本"></a>1、创建shell脚本</h1><p><code>vi frpc2.sh</code></p><h1 id="2、以下为命令模板以供参考，可自行根据情况修改，键入“i”，进入编辑模式"><a href="#2、以下为命令模板以供参考，可自行根据情况修改，键入“i”，进入编辑模式" class="headerlink" title="2、以下为命令模板以供参考，可自行根据情况修改，键入“i”，进入编辑模式"></a>2、以下为命令模板以供参考，可自行根据情况修改，键入“i”，进入编辑模式</h1><pre><code>    #! /bin/sh # 此行需要根据情况修改，因为是生成shell脚本，所以此处用的是 /bin/sh    #    # Copyright (C) 2018 aragon     #    # This is free software, licensed under the GNU General Public License v3.    # See /LICENSE for more information.    fun_check() { # 检查当前进程状态    pid=`pidof frpc2` # 寻找进程中名含有frpc2的进程，可根据需要修改进程名    if [ -n “$pid” ];then    return 0 # 如果进程不存在则返回0    else    return 1 # 如果存在则返回1    fi    }    fun_start() { # 运行frpc程序    if fun_check; then # 调用fun_check 函数，如果为真    echo “frpc2 已经在运行。。。” # 不启动程序并提示已经在运行    else # 如果为假，运行程序    cd /root/frpc2    ./frpc2 -c frpc.ini &amp;    echo “frpc2 启动！！！”    fi    }    fun_stop() { # 停止运行程序    if fun_check; then # 调用fun_check 函数，如果为真    killall frpc2 # killall 命令中止所有还含有frpc2的进程，可根据需要修改    echo “已停止frpc2。。。”    else # 返回为假则无操作并提示    echo “frpc2 并未运行。。。”    fi    }    fun_restart() { # 重启程序，其实是先停止再启动    fun_stop    fun_start    }    fun_status() { # 检查当前进程运行状态    if fun_check; then    echo “frpc2 已在运行”    else    echo “frp2 并未运行”    fi    }    fun_config() { # 查看当前frpc配置文件    vi /root/frpc2/frpc.ini    }    arg1=$1 # arg1 = 脚本命令后附带的命令内容。如输入 frpc2 start,则 arg1 = start    [ -z ${arg1} ] # 查看 当前输入的是什么命令    case “${arg1}” in    start|stop|restart|status|config) # 如果输入的命令符合则运行指定命令    fun_${arg1}    ;;    *) # 如果输入命令不在有效范围则提示正确指令    echo “Usage: $SCRIPTNAME {start|stop|restart|status|config}”    RET_VAL=1    ;;    esac #退出case语句    exit $RET_VAL #退出脚本</code></pre><h1 id="3、按“ESC”退出编辑模式，并键入“-wq”保存脚本"><a href="#3、按“ESC”退出编辑模式，并键入“-wq”保存脚本" class="headerlink" title="3、按“ESC”退出编辑模式，并键入“:wq”保存脚本"></a>3、按“ESC”退出编辑模式，并键入“:wq”保存脚本</h1><h1 id="4、OpenWrt中输入"><a href="#4、OpenWrt中输入" class="headerlink" title="4、OpenWrt中输入"></a>4、OpenWrt中输入</h1><pre><code>chmod +x /root/frpc2/frpc2.sh # 给脚本可执行权限ln -s /root/frpc2/frpc2.sh /bin/frpc2 # 加入/bin 中，则可以直接使用 frpc2 start等来实现启动命令ln -s /root/frpc2/frpc2.sh /etc/init.d/frpc2 # 加入/etc/init.d 中，则可以直接使用service frpc2 start等来实现启动命令</code></pre><p>以上就是OpenWrt 添加自定命令（以Frpc为例）的全部内容，如果要实现frpc实现开机自启，可以参考这篇文章。</p><p><a href="https://wp.aragon.wang/archives/28 “OpenWrt添加开机启动任务”" target="_blank" rel="noopener">OpenWrt添加开机启动任务</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opnwrt </tag>
            
            <tag> 自定义指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下使用crontab运行Python脚本的坑</title>
      <link href="/2019/08/26/linux%E4%B8%8B%E4%BD%BF%E7%94%A8crontab%E8%BF%90%E8%A1%8CPython%E8%84%9A%E6%9C%AC%E7%9A%84%E5%9D%91/"/>
      <url>/2019/08/26/linux%E4%B8%8B%E4%BD%BF%E7%94%A8crontab%E8%BF%90%E8%A1%8CPython%E8%84%9A%E6%9C%AC%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在使用Python脚本实现DDNS功能时发现并没有定时运行,在指令后面添加 <code>&gt;/dev/null 2&amp;&gt;1</code><br>指令，发现如下报错</p><pre><code>00-18-01Traceback (most recent call last):  File "/home/c2/DDNS/run.py", line 21, in &lt;module&gt;    import requestsImportError: No module named requests</code></pre><p>脚本单独运行是正常的，但是已使用Crontab后运行异常，再一番Google后发现，是Crontab不能正确加载Python的环境变量导致，需要做如下修改：</p><ul><li>1 直接执行Python所在路径，路径可以使用whereis python 指令来获取，所以我的指令是:<pre><code>/usr/bin/python3.6 #此处必须指定使用的python版本，不然报错`</code></pre></li><li>2 使用绝对路径</li></ul><p><code>/usr/bin/python3.6 /path/to/your/py/run.py</code><br>包括脚本需要指定的参数包含路径的，都必须使用绝对路径</p><p>以上就是我在使用crontab实现计划任务时的遇到的问题和解决方法，希望能对你有所帮助</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> crontab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu Server 输入sudo 指令不使用密码</title>
      <link href="/2019/08/26/Ubuntu-Server-%E8%BE%93%E5%85%A5sudo-%E6%8C%87%E4%BB%A4%E4%B8%8D%E4%BD%BF%E7%94%A8%E5%AF%86%E7%A0%81/"/>
      <url>/2019/08/26/Ubuntu-Server-%E8%BE%93%E5%85%A5sudo-%E6%8C%87%E4%BB%A4%E4%B8%8D%E4%BD%BF%E7%94%A8%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>sudo 指令在使用过程中需要反复输入密码，显得很麻烦，自然要取消这恼人的设定啊，哈哈哈</p><pre><code>sudo cp /etc/sudoers .      # 备份默认配置到当前文件夹sudo -i                     # 切换到root用户visudo                      # 编辑sudo 配置文件，也可以用vi /etc/sudoers,不过使用vim编辑会提示不能保存只读文件</code></pre><p>接下来就时修改配置，找到 </p><p><code>root　　ALL=(ALL:ALL) ALL</code></p><p>在下边添加类似的一行,Your_Name是你要免密登陆的用户名</p><p><code>Your_Name = ALL=(ALL:ALL) NOPASSWD: ALL</code></p><p>接着将</p><p><code>%sudo ALL=(ALL:ALL) ALL</code> </p><p>修改为</p><p><code>%sudo ALL=(ALL:ALL) NOPASSWD: ALL</code></p><p>保存后退出重新登陆，使用 sudo ls测试就会发现不需要输入密码了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> sudo </tag>
            
            <tag> 不输入密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt 挂载局域网SAMBA共享文件夹</title>
      <link href="/2019/08/26/OpenWrt-%E6%8C%82%E8%BD%BD%E5%B1%80%E5%9F%9F%E7%BD%91SAMBA%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
      <url>/2019/08/26/OpenWrt-%E6%8C%82%E8%BD%BD%E5%B1%80%E5%9F%9F%E7%BD%91SAMBA%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>OpenWrt在挂载局域网共享文件夹可以有效减少磁盘空间占用，实现无限扩容的可能，在操作中踩了不少坑，所以记录下来：</p><h1 id="操作指令"><a href="#操作指令" class="headerlink" title="操作指令"></a>操作指令</h1><p>首先安装相关套件cifsmount</p><pre><code>opkg update         # 更新软件列表opkg install cifsmount          # 安装cifsmount</code></pre><p>没有报错即为成功</p><h1 id="挂载文件夹"><a href="#挂载文件夹" class="headerlink" title="挂载文件夹"></a>挂载文件夹</h1><p>此处挂载局域网192.168.1.40的share文件夹到 OpenWrt中的/root/shar文件夹</p><p><code>mount.cifs //192.168.1.40/share /root/share -o user=your_name,pass=your_password,vers=1.0,sec=ntlm</code></p><p>因为OpenWrt的mount命令版本比较低，此处的 vers=1.0是必须的,sec=ntlm也是必须的加密选项，不过需要根据网络不同配置不同的加密选项</p><h1 id="取消挂载"><a href="#取消挂载" class="headerlink" title="取消挂载"></a>取消挂载</h1><p>如果想取消挂载，仅需要取消取消挂载点就可以了<br><code>umount /root/share</code></p><h1 id="期间碰到的坑："><a href="#期间碰到的坑：" class="headerlink" title="期间碰到的坑："></a>期间碰到的坑：</h1><p><code>mount error(22): Invalid argumentRefer to the mount.cifs(8) manual page (e.g. man mount.cifs)</code></p><p>意思为参数错误，原因是后面的 <code>user=your_name,pass=your_password</code> 后面没有添加 <code>vers=1.0,sec=ntlm</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> smb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UBUNTU+Apache2 强制开启https访问的方法</title>
      <link href="/2019/08/26/UBUNTU-Apache2-%E5%BC%BA%E5%88%B6%E5%BC%80%E5%90%AFhttps%E8%AE%BF%E9%97%AE%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2019/08/26/UBUNTU-Apache2-%E5%BC%BA%E5%88%B6%E5%BC%80%E5%90%AFhttps%E8%AE%BF%E9%97%AE%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在使用Let’s encrypt 申请下来的免费证书在简单设置以后，还需要进行简单设置才能实现强制HTTPS访问，以下是使用 .htaccess 的方法来实现：</p><h1 id="1-使能-htaccess-文件"><a href="#1-使能-htaccess-文件" class="headerlink" title="1. 使能 .htaccess 文件"></a>1. 使能 .htaccess 文件</h1><p><code>sudo vi /etc/apache2/apache2.conf</code></p><p>找到以下内容</p><pre><code>&lt;Directory /var/www/&gt;        Options Indexes FollowSymLinks        AllowOverride all        Require all granted&lt;/Directory&gt;</code></pre><p>确认 AllowOverride all 这行是这样就可以了,保存后输入以下命令</p><pre><code>sudo a2enmod rewrite sudo a2enmod headers sudo service apache2 restart</code></pre><p>命令作用：打开重定位功能并重启apache2</p><h1 id="2-修改-htaccess-文件"><a href="#2-修改-htaccess-文件" class="headerlink" title="2. 修改.htaccess 文件"></a>2. 修改.htaccess 文件</h1><p>输入<br><code>sudo vi /var/www/html/你的网站根目录/.htaccess</code></p><p>找到以下内容<br>RewriteEngine On<br>在下面输入如下内容：</p><pre><code>RewriteCond  %{HTTPS} !=on                          # 重定位规则：如果不是HTTPSRewriteRule  ^(.*) https://%{SERVER_NAME}$1 [L,R]   # 执行操作：跳转使用https访问</code></pre><p>如上就是强制HTTPS访问的方法了，希望对你有帮助。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> apache2 </tag>
            
            <tag> 强制https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu+apache2 网站添加用户访问验证</title>
      <link href="/2019/08/26/Ubuntu+apache2%20%E7%BD%91%E7%AB%99%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AE%E9%AA%8C%E8%AF%81/"/>
      <url>/2019/08/26/Ubuntu+apache2%20%E7%BD%91%E7%AB%99%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AE%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在一些比较特殊的网站需要添加用户验证的功能，下面是使用.htaccess文件的方法实现用户验证</p><h1 id="1-安装apache-utils"><a href="#1-安装apache-utils" class="headerlink" title="1. 安装apache-utils"></a>1. 安装apache-utils</h1><pre><code>sudo apt-get updatesudo apt-get install apache2-utils</code></pre><h1 id="2-生成-htpasswd-文件"><a href="#2-生成-htpasswd-文件" class="headerlink" title="2. 生成 .htpasswd 文件"></a>2. 生成 .htpasswd 文件</h1><p>推荐在网站根目录下生成.htpasswd 文件保存密码</p><pre><code>touch /var/www/html/网站根目录/.htpasswd             # 生成 .htpasswd 文件sudo htpasswd -c /var/www/html/网站根目录/.htpasswd  验证用户名</code></pre><p>验证用户名需要自行修改，重复两次后完成密码生成</p><h1 id="3-使能-htaccess-文件"><a href="#3-使能-htaccess-文件" class="headerlink" title="3. 使能 .htaccess 文件"></a>3. 使能 .htaccess 文件</h1><p><code>sudo vi /etc/apache2/apache2.conf</code><br>找到以下内容</p><pre><code>&lt;Directory /var/www/&gt;        Options Indexes FollowSymLinks        AllowOverride all        Require all granted&lt;/Directory&gt;</code></pre><p>确认 AllowOverride all 这行是这样就可以了,保存后输入以下命令</p><p><code>sudo service apache2 restart</code><br>命令作用：重启apache2</p><h1 id="4-修改-htaccess-文件"><a href="#4-修改-htaccess-文件" class="headerlink" title="4. 修改.htaccess 文件"></a>4. 修改.htaccess 文件</h1><p>在.htaccess 文件的最后加入如下内容：</p><pre><code>AuthType BasicAuthName "Restricted Content"AuthUserFile /var/www/html/网站根目录/.htpasswdRequire valid-user</code></pre><p>保存后退出</p><h1 id="5-验证"><a href="#5-验证" class="headerlink" title="5. 验证"></a>5. 验证</h1><p>直接访问网站，会弹出验证验证信息：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/08/27/6YoaKyg5EXPxImf.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>如果验证错误会出现如下信息：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/08/27/8yndzxNArqaiYKc.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p></p><p>以上就是apache2 添加用户验证的方法，希望对你有帮助。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apache </tag>
            
            <tag> 验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt 设置静态路由实现跨网段访问</title>
      <link href="/2019/08/26/OpenWrt-%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E8%B7%A8%E7%BD%91%E6%AE%B5%E8%AE%BF%E9%97%AE/"/>
      <url>/2019/08/26/OpenWrt-%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E8%B7%A8%E7%BD%91%E6%AE%B5%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>由于软路由无线功能实在弟弟，只能使用无线路由作为AP使用，实际使用中发现光是作为旁路路由的话，如果软路由挂了（升级维护重启之类的），无线路由下挂的所有路由均会导致网关指向路由，需要重新启动wifi才能上网，如果使用智能家居设备的话非常麻烦，所以使用无线路由nat是最好的方法。<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/08/27/HAS36vCtZWXyTGm.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>如图，正常情况下，路由器B作为nat,所以下面的设备可以访问路由器A上的资源，而路由A下面的设备不能访问路由B下面的设备，要怎么办呢？<p></p><p>解决方法<br>很简单，在路由A设置一个静态路由即可实现。设置方法如下：<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/08/27/qI7fFx3TR9X2kBA.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><br>这样就可以很方便的让路由A访问路由下的资源，且路由A扑街后也不影响路由B下的设备状态。<p></p><p><font size="6" color="red">路由B一定要开启相应的防火墙规则</font><br></p><p><font size="6" color="red">路由B一定要开启相应的防火墙规则</font><br></p><p><font size="6" color="red">路由B一定要开启相应的防火墙规则</font><br></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 跨网段访问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt 使用PY脚本实现DDNS</title>
      <link href="/2019/08/26/OpenWrt-%E4%BD%BF%E7%94%A8PY%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0DDNS/"/>
      <url>/2019/08/26/OpenWrt-%E4%BD%BF%E7%94%A8PY%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0DDNS/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>虽然KoolShare OpenWrt 有自带的DDNS功能，但不能实现多域名解析和对IPv6 的DDNS有问题，在找了一圈后，发现NewFuture大佬的DDNS十分好用，遂有以下记录。<br>脚本链接：<br>自动更新域名解析到本机IP(支持dnspod,阿里DNS,CloudFlare,DNSCOM…)</p><h1 id="下载脚本"><a href="#下载脚本" class="headerlink" title="下载脚本"></a>下载脚本</h1><p><code>git clone https://github.com/NewFuture/DDNS.git</code></p><p>从GitHub上直接复制下来，简单方便，会在root路径下出现DDNS文件夹</p><h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><p><code>vi /root/DDNS/config.json</code></p><p>按“i”键开始输入，光标移动修改，下面以阿里DDNS为例:<br></p><p><font color="#660000" size="6">里面的注释信息请勿复制进脚本</font><br> </p><pre><code>  {       "debug": "false",            # 调试模式，解析时会输出更多信息       "dns": "alidns",             # 选择DNS服务提供商，"dnspod 或 dnspod_com 或 alidns 或 dnscom 或 cloudflare"均可       "id": "your ID",         # 从阿里云获取的Access Key ID       "token": "your Secret",  #从阿里云获取的Access Key Secret       "index4": "default",         # IPv4解析方式，一般使用Default即可满足要求，不成功则需要访问Git地址上设置别的值       "index6": "default",         # IPv6解析方式，一般使用Default即可满足要求，不成功则需要访问Git地址上设置别的值       "ipv4": ["your.domain.com",  # IPv4解析域名组               "your.domain.com"],       "ipv6": ["your.domain.com",  # IPv6解析域名组                "your.domain.com"],      "proxy": null         # 不使用代理 }</code></pre><p>键入“ESC” 退出编辑，输入”:wq”保存配置并退出。</p><h1 id="添加计划任务"><a href="#添加计划任务" class="headerlink" title="添加计划任务"></a>添加计划任务</h1><p>进入OpenWrt后台，找到 系统-计划任务，在右边文本框输入以下内容：</p><p><em>/5 </em> <em> </em> * /root/DDNS/run.py -c config.json<br>意思是每5分钟更新一次DDNS信息，如果重复不会覆盖。有需要可以修改5来增减解析间隔时间。</p><p>以上就是利用NewFuture大佬的DDNS脚本在OpenWrt上实现多域名解析的方法，希望对你有所帮助。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> DDNS </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

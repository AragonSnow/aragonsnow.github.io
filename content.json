{"meta":{"title":"Aragon's Blog","subtitle":"随意转载,不保留我的信息也可以，互联网精神重在分享","description":"Aragon's Blog","author":"AragonSnow","url":"https://hexo.aragon.wang","root":"/"},"pages":[{"title":"404 Not Found","date":"2019-08-26T21:39:29.000Z","updated":"2019-08-26T21:41:22.994Z","comments":true,"path":"404.html","permalink":"https://hexo.aragon.wang/404.html","excerpt":"","text":"404 Not Found 很抱歉，您访问的页面不存在可能是输入地址有误或该地址已被删除 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"categories","date":"2019-08-26T15:00:26.000Z","updated":"2019-08-27T05:32:04.501Z","comments":false,"path":"categories/index.html","permalink":"https://hexo.aragon.wang/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"about","date":"2019-08-26T15:11:31.000Z","updated":"2019-08-26T15:12:09.987Z","comments":true,"path":"about/index.html","permalink":"https://hexo.aragon.wang/about/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"friends","date":"2019-08-26T15:35:31.000Z","updated":"2019-08-26T15:35:31.124Z","comments":true,"path":"friends/index.html","permalink":"https://hexo.aragon.wang/friends/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tags","date":"2019-08-26T15:35:50.000Z","updated":"2019-08-27T04:18:23.725Z","comments":false,"path":"tags/index.html","permalink":"https://hexo.aragon.wang/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"IBMCloud部署OneList-Go","slug":"IBMCloud部署OneList-Go","date":"2020-01-11T09:12:53.000Z","updated":"2020-01-11T10:20:18.259Z","comments":true,"path":"2020/01/11/IBMCloud部署OneList-Go/","link":"","permalink":"https://hexo.aragon.wang/2020/01/11/IBMCloud部署OneList-Go/","excerpt":"","text":"原因原来的Onelist已经失效，Moeclub大佬用Go 语言重写了OneList项目，感谢大佬~ OneList - Written in GoLang Demohttps://onelist-cf.us-south.cf.appdomain.cloud/ 准备 IBMCloud账号 电脑 动手能力,默认你是使用过CMD，git,IBMcloud的人 部署授权通过下面URL登录 (右键新标签打开)国际版, 个人版(家庭版)https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=78d4dc35-7e46-42c6-9023-2d39314433a5&amp;response_type=code&amp;redirect_uri=http://localhost/onedrive-login&amp;response_mode=query&amp;scope=offline_access%20User.Read%20Files.ReadWrite.All 中国版(世纪互联)https://login.chinacloudapi.cn/common/oauth2/v2.0/authorize?client_id=dfe36e60-6133-48cf-869f-4d15b8354769&amp;response_type=code&amp;redirect_uri=http://localhost/onedrive-login&amp;response_mode=query&amp;scope=offline_access%20User.Read%20Files.ReadWrite.All 打开登陆账号，授权应用，然后会提示找不页面，不用管，先记下浏览器里面的链接 01.PNG 生成配置下载文件git clone https://github.com/AragonSnow/onelist-go-cf.git 或者 下载压缩包后解压 配置CMD切换到工程所在路径后输入： 根目录挂载: onelist -a \"刚获取的授权URL\" -s \"/\" 多盘挂载1: onelist -a \"刚获取的授权URL\" -s \"/网盘1\" 多盘挂载2: onelist -a \"刚获取的授权URL\" -s \"/网盘2\" 02.PNG 显示 Success表示成功，此时可以看到工程目录下多了一个config.json文件此时可以输入,查看生成的效果: 启动程序: onelist -bind 0.0.0.0 -port 5000 会出现提示[cache]的代表在获取信息，此时打卡会显示404 Not Found,需要Cache生成完才能看到文件 IBMCloud部署创建程序需要创建一个PHP的CF程序和Git仓库，这里就不展开，请参考：IBMCLoud(Cloud Foundry) 部署Oneindex教程 需要克隆的Git仓库换为：https://github.com/AragonSnow/onelist-go-cf 修改Git进入Git后需要修改两个文件 manifest.yml 03.PNG 将manifest.yml中的onelist-cf 全部修改为你对应的程序名 config.json将刚刚生成的config.json文件上传到IBMCloud的git路径 启动项目修改完Git后是会自动启动的，如果设置了手动请手动启动。 扩展如何加密文件夹比如想加密的路径为https://onelist-cf.us-south.cf.appdomain.cloud/av/精神食粮配置方法如下： 04.PNG \"SubPath\": \"/av\" 对应 链接中的av路径 \"AuthPath\": \"/教育资料?usrname:passwd|/精神食粮?usrname:passwd\" /教育资料 表示加密/av/教育资料 路径 usrname:passwd 对应用户名和密码 Todo所以需要配合IBM Cli实现自动重启，请参考这篇文章。IBMCloud部署onelist一直试用教程IBMCloud的CF自动重启平台还在搭建中。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"白嫖","slug":"白嫖","permalink":"https://hexo.aragon.wang/categories/白嫖/"}],"tags":[{"name":"白嫖","slug":"白嫖","permalink":"https://hexo.aragon.wang/tags/白嫖/"},{"name":"ibmcloud","slug":"ibmcloud","permalink":"https://hexo.aragon.wang/tags/ibmcloud/"},{"name":"onelist","slug":"onelist","permalink":"https://hexo.aragon.wang/tags/onelist/"}]},{"title":"IBMCloud搭建qiandao平台","slug":"IBMCloud搭建qiandao平台","date":"2020-01-10T13:08:19.000Z","updated":"2020-01-10T14:38:00.245Z","comments":true,"path":"2020/01/10/IBMCloud搭建qiandao平台/","link":"","permalink":"https://hexo.aragon.wang/2020/01/10/IBMCloud搭建qiandao平台/","excerpt":"","text":"原因签到 https://qiandao.today/ 自动化实现签到功能。IBMCloud 邮箱注册即可使用，人手一个自建签到平台不是梦。 准备 IBMCloud 账号 一定的动手能力 MySQL 账号申请这里使用免费的DB4fDree.net, 仅适用于测试环境，注重安全的用户请按 Ctrl+w 退出本页面。 注册DB4fDree 1.PNG 注册完以后，记下用户名密码，数据库名称,后面后需要用到的地方 IBMCloud 部署注册过程略过，项目创建过程参考这篇文章前部分的内容，创建一个python的工程IBMCLoud(Cloud Foundry) 部署Oneindex教程项目创建完成,我们需要clone和定制内容。 git等待一段时间以后，创建完成。点击左边的概述，再点击 启动 开始连续交付 4.PNG 切换到 ”delibery pipeline“, 点击 创建 确定后创建密钥 5.PNG 切换到 ”git存储和问题追踪“，存储库类型选择 克隆 ，github链接为：https://github.com/AragonSnow/qiandao-cf取消 ”启用问题“和 ”跟踪代码更改部署“,将仓库设为私人的，防止别人看到你账号密码。最后点击左上角完成创建 6.PNG 返回IBMcloud,打开概述，点击查看工具链，点击GIT 9.PNG 10.PNG 需要修改两个文件，第一个：manifest.yml点击manifest.yml文件打开，点击右边 Edit 修改成对应的项目名，比如我之前创建的qiandao-cf, 最后点击下方的Commit 按钮提交修改 2.PNG 第一个：config.py修改为从DB4free.net上申请的信息。 3.PNG 数据库修改提交完以后，此时打开网页应该会报500 错误，是因为数据库没有创建，此处需要将数据导入数据库。登陆DB4free.net的phpmyadmin管理界面,选择SQLhttps://www.db4free.net/phpMyAdmin/index.php用notepad++打开工程目录下的qiandao.sql,将所有的tiebasign 替换成你对应的数据库名称，比如我这里申请的qiandao_cf,并复制到SQL文本框里，点击执行。 4.PNG 5.PNG 执行后，可能会报错，请无视，打开列表就可以看到数据库已经导入了。 6.PNG 管理以上步骤完成以后，网站就可以打开了，此时需要设置一个管理员。先在部署的签到站注册一个账号，成功后，进入登陆DB4free.net的phpmyadmin管理界面。打开数据库的user表，对应的邮箱的role值修改为admin,这样这个账号就是管理员了。 7.PNG TodoIBMCloud的CloudFoundry需要每10天重启一次，所以需要配合IBM Cli实现自动重启，请参考这篇文章。IBMCloud部署onelist一直试用教程 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"白嫖","slug":"白嫖","permalink":"https://hexo.aragon.wang/categories/白嫖/"}],"tags":[{"name":"白嫖","slug":"白嫖","permalink":"https://hexo.aragon.wang/tags/白嫖/"},{"name":"ibmcloud","slug":"ibmcloud","permalink":"https://hexo.aragon.wang/tags/ibmcloud/"},{"name":"qiandao","slug":"qiandao","permalink":"https://hexo.aragon.wang/tags/qiandao/"}]},{"title":"IBMCLoud(Cloud Foundry) 部署Oneindex教程","slug":"IBMCLoud-Cloud-Foundry-部署Oneindex教程","date":"2019-12-14T11:10:10.000Z","updated":"2019-12-14T14:12:01.177Z","comments":true,"path":"2019/12/14/IBMCLoud-Cloud-Foundry-部署Oneindex教程/","link":"","permalink":"https://hexo.aragon.wang/2019/12/14/IBMCLoud-Cloud-Foundry-部署Oneindex教程/","excerpt":"","text":"原因IBMCloud 使用邮箱注册即可使用 CloudFoundry 挂载 Oneindex,每月375GB流量，简单实用，白嫖方便。 准备IBMCloud 注册账号，邮箱注册即可，地址：https://cloud.ibm.com/loginOneDrive 账号，获取教程:https://saodaye.com/sharel/1951.html 部署教程1. 创建项目登陆账号成功后选择左边栏的的Cloud Foundry打开。 1.PNG 选择公共的应用程序，点击创建 2.PNG 程序选择PHP,内存128M或者256M，这里可能会不出现免费选项，刷新一下就好域一定要是”us-south.cf.appdomain.cloud”,其他的都被墙了程序名必须使用不一样的，不然会报错。记住，这后面会用到。最后点击右侧创建 3.PNG 等待一段时间以后，创建完成。点击左边的概述，再点击 启动 开始连续交付 4.PNG 切换到 ”delibery pipeline“, 点击 创建 确定后创建密钥 5.PNG 切换到 ”git存储和问题追踪“，存储库类型选择 克隆 ，github链接为：https://github.com/AragonSnow/oneindex-cf取消 ”启用问题“和 ”跟踪代码更改部署“,将仓库设为私人的，防止别人看到你账号密码。最后点击左上角完成创建 6.PNG 这些配置完成后，可以暂时退出IBMCloud,获取口令后再来重新使用。 2. 获取OneDrive口令打开链接https://oneindex-gettoken.us-south.cf.appdomain.cloud/ 注册OneDrive APP 7.PNG 如图获取到登陆使用的Secret 和 Client ID install.gif 返回https://oneindex-gettoken.us-south.cf.appdomain.cloud/，输入刚刚获取到的Secret 和 Client ID，等待页面返回Access_token和Refresh_Token,并记录下来 8.PNG 以上就是获取口令的过程 3. 输入口令返回IBMcloud,打开概述，点击查看工具链，点击GIT 9.PNG 10.PNG 需要修改三个文件，第一个：manifest.yml点击manifest.yml文件打开，点击右边 Edit 修改成对应的项目名，比如我之前创建的Oneindex-cf-sample, 最后点击下方的Commit 按钮提交修改 11.PNG 12.PNG 13.PNG 在 /web/config目录下打开base.php，点击右边 Editsite_name 是你的网站标题password 是你后台登陆密码password 是你后台登陆密码client_secret 替换 之前获取的secretclient_id 替换 之前获取的Client IDrefresh_token 替换成 获取到的Refresh_token 14.PNG 15.PNG 16.PNG 在 /web/config目录下打开token.php，点击右边 Editaccess_token 替换 之前获取的access_tokenrefresh_token 替换成 获取到的Refresh_token 17.PNG 以上即可完成配置的修改 4. 打开网站等待5分钟左右，自动部署完成，返回点击访问网站URL即开打开网站。 18.PNG 19.PNG 以上就是IBMCloud 部署Oneindex的教程。谢谢观看，如果有问题请在博客下给我留言。 无限试用参考之前的IBMCloud部署onelist一直试用教程使用VPS定时任务实现无限试用。后期我会搭建重启平台供大家来实现无主机重启。 谢谢观看 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"白嫖","slug":"白嫖","permalink":"https://hexo.aragon.wang/categories/白嫖/"}],"tags":[{"name":"白嫖","slug":"白嫖","permalink":"https://hexo.aragon.wang/tags/白嫖/"},{"name":"oneindex","slug":"oneindex","permalink":"https://hexo.aragon.wang/tags/oneindex/"},{"name":"ibmcloud","slug":"ibmcloud","permalink":"https://hexo.aragon.wang/tags/ibmcloud/"},{"name":"cloudfoundry","slug":"cloudfoundry","permalink":"https://hexo.aragon.wang/tags/cloudfoundry/"}]},{"title":"GCP最新白嫖教程","slug":"GCP最新白嫖教程","date":"2019-10-14T14:13:56.000Z","updated":"2020-01-07T06:03:14.270Z","comments":true,"path":"2019/10/14/GCP最新白嫖教程/","link":"","permalink":"https://hexo.aragon.wang/2019/10/14/GCP最新白嫖教程/","excerpt":"","text":"原因GCP作为财大气粗的Google旗下的平台，会给新用户送300美金的一年额度供用户试用。因为薅羊毛的人太多了，导致删除添加结算管理员的方法已经失效。我无意中发现了新的破解方法，不知何时失效，且薅且珍惜吧 准备无非是用没开通过GCP的新账户或者没注册过的信用卡，这里选择新账户： 没有开通过GCP的账户的Gmail账户(并夕夕等平台自行购买，3-6块一个吧)； 梯子，为了上GCP； 一张可以过验证的信用卡，至于那种能过，问就是不知道。 开始1. 登录GCP最好试用Chrome无痕模式打开链接:GCP 命令台 https://console.cloud.google.com按照提示输入账号密码登录，注意要修改辅助邮箱为你自己的邮箱，还有修改密码 2. 填写信息试用第一次进入会让你选择地区，默认美国就好 1 首次登陆选择地区.PNG 左上角会显示试用邀请，点击了解详情 2 试用邀请.PNG 点击开始免费试用 3 免费试用.PNG 地区选美国，勾选已阅读并同意条款 (大概是人生中撒的最多的谎),点击继续 4 开始步骤 1.PNG 账户类型选择个人，信息使用美国地址生成器生成 美国地址生成器 http://www.shenfendaquan.com/Index/index/custom_result 复制粘贴进去即可 5 开始步骤 2.PNG 填写信用卡信息，用户名地址最好使用真实的信用卡信息避免验证不过好像Google根本验证具体信息，反正我每次都这样填，等待信用卡预授权结束 6 开始步骤 3.PNG 这里先不添加成员，选择略过 7 开始步骤 4.PNG 点击左上角的账单，就能看到香喷喷的300刀一年试用额度到账，可以愉快的开始白嫖了,至于怎么利用VPS,不是本文重点,就不多赘述了。 对于想无限续杯的朋友请继续往下看。 无限续杯进入账单 - 账户管理 - 添加一位账单管理员 将旧帐号填上， 为了防止填错账号，先不要删除现在的管理员，避免添加错账号。 8 无限续杯 1.PNG 9 无限续杯 2.PNG 无痕模式打开chrome登陆旧账号，会提示就能看到有多个结算账号了，选择转至关联账号 10 无限续杯 3.PNG 修改结算账号为刚开通的邮箱账号 13 无限续杯 6.PNG 14 无限续杯 5.PNG 进入账单 - 账户管理 - 更改结算账号，选择有钱能付款的账号，避免被反撸。最后点击右上角显示用户信息面板，删除新账号的，只保留旧账号就可以了，这样，新账号里面的付款信息也会一并被删除。以上就是GCP无限续杯的教程，有什么问题就给我留言 看我心情回复你 16 无限续杯.PNG 最后薅羊毛最好不要广而告之，最后大家都没有好果汁吃 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"白嫖","slug":"白嫖","permalink":"https://hexo.aragon.wang/categories/白嫖/"}],"tags":[{"name":"无限续杯","slug":"无限续杯","permalink":"https://hexo.aragon.wang/tags/无限续杯/"},{"name":"GCP","slug":"GCP","permalink":"https://hexo.aragon.wang/tags/GCP/"},{"name":"白嫖","slug":"白嫖","permalink":"https://hexo.aragon.wang/tags/白嫖/"}]},{"title":"IBMCloud部署onelist一直试用教程","slug":"IBMCloud部署onelist一直试用教程","date":"2019-08-28T07:35:04.000Z","updated":"2019-08-31T08:08:19.707Z","comments":true,"path":"2019/08/28/IBMCloud部署onelist一直试用教程/","link":"","permalink":"https://hexo.aragon.wang/2019/08/28/IBMCloud部署onelist一直试用教程/","excerpt":"","text":"原因 IBMCloud 仅需邮箱注册一下账号就能得到一个虚拟空间，不过会在一段时间后自动停止运行，本教程主要是为了解决停止的问题 部署具体不多讲，参考教程：OneList-最简洁的OneDrive目录索引部署教程 不停机部署完成后，只要重启就可以无限使用： 部署IBMCloud CLIsudo curl -sL https://ibm.biz/idt-installer | bash等待自动部署完成 生成IBMCloud 重启脚本nano ibmcloud.sh复制以下内容 #!/bin/sh LogFile_path=\"/home/gc/ibmcloud.log\" echo \"===============================\" &gt;&gt; $LogFile_path echo `date +%Y-%m-%d-%H-%M-%S` &gt;&gt; $LogFile_path /usr/local/bin/ibmcloud login -u IBMCloud账号 -p IBMCloud密码 -r 'us-south' &gt;&gt; $LogFile_path 2&gt;&amp;1 /usr/local/bin/ibmcloud target --cf-api 'https://api.ng.bluemix.net' -o IBMCloud账号 -s 'dev' &gt;&gt; $Lo$ /usr/local/bin/ibmcloud cf restart Onelist部署时程序名 &gt;&gt; $LogFile_path 2&gt;&amp;1 修改其中的IBMCloud账号，IBMCloud密码，Onelist部署时程序名。按Ctrl+x 保存退出。 输入 crontab -e生成计划任务每天运行01 4 * * * bash /sh所在完整路径/ibmcloud.sh路径需要自行修改。 可以修改进化运行时间来验证脚本运行情况。一切OK以后就可以愉快的白嫖了 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"白嫖","slug":"白嫖","permalink":"https://hexo.aragon.wang/categories/白嫖/"}],"tags":[{"name":"白嫖","slug":"白嫖","permalink":"https://hexo.aragon.wang/tags/白嫖/"},{"name":"ibmcloud","slug":"ibmcloud","permalink":"https://hexo.aragon.wang/tags/ibmcloud/"},{"name":"onelist","slug":"onelist","permalink":"https://hexo.aragon.wang/tags/onelist/"}]},{"title":"Heroku部署oneindex教程","slug":"Heroku部署oneindex教程","date":"2019-08-28T03:01:55.000Z","updated":"2019-08-28T04:50:23.986Z","comments":true,"path":"2019/08/28/Heroku部署oneindex教程/","link":"","permalink":"https://hexo.aragon.wang/2019/08/28/Heroku部署oneindex教程/","excerpt":"","text":"原因 当然是能白嫖啦！！！heroku 的免费套餐和白嫖来的Onedrive账号，使用OneIndex搭配出来成为免费的网盘系统，感觉不要太爽。 PS: 目前网上的教程大多是使用关联Github后直接编译，结果是会无限初始化，本教程就是为了解决此问题才写的。 准备 1、VPS (安装了git) 2、注册Heroku的账号并安装了Heroku CLI Heroku 使用教程 3、一个Onedrive账号 过程1. 安装PHP和Apache2以Ubuntu为例，登陆上VPS，输入： sudo apt install php php-curl apache2 git -y # 安装oneindex 所需套件 sudo service apache2 restart #重启apache2 git clone https://github.com/donwa/oneindex cd oneindex # 下载oneindex sudo chown -R www-data:www-data cache # 给与 Apache 读写权限 sudo chown -R www-data:www-data config sudo ln -s /home/gc/oneindex /var/www/html/oneindex #需要/home/gc 需要根据oneindex 所在路径进行修改 然后访问vps ip/oneindex 就可以看到 Oneindex 绑定界面： 看到全部是绿勾表示安装套件OK 2. 初始化Oneindex过程不多说，参考作者说明: Onindex 说明 3. Heroku部署3.0 安装 Heroku CLIsudo snap install --classic heroku 3.1 登录herokuVPS输入 heroku login -i根据提示注册的账号密码后使用 3.2 创建 Heroku 项目在 Oneindex 目录下输入 heroku creat APPNAMEAPPNAME 如果被占用了就更换一个 3.3 上传代码因为已经对Oneindex完成初始化了，所以直接上传到Heroku 即可git push heroku master没有报错登录上即可看到Oneindex部署完成： 后记使用阿里云监访问可以避免停机。Heroku的免费时间为550小时(22天)，添加信用卡后可以翻倍，有效白嫖。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"白嫖","slug":"白嫖","permalink":"https://hexo.aragon.wang/categories/白嫖/"}],"tags":[{"name":"白嫖","slug":"白嫖","permalink":"https://hexo.aragon.wang/tags/白嫖/"},{"name":"OneIndex","slug":"OneIndex","permalink":"https://hexo.aragon.wang/tags/OneIndex/"},{"name":"Heroku","slug":"Heroku","permalink":"https://hexo.aragon.wang/tags/Heroku/"}]},{"title":"OpenWrt 添加开机启动任务","slug":"OpenWrt-添加开机启动任务","date":"2019-08-26T12:50:10.000Z","updated":"2019-08-28T04:50:20.688Z","comments":true,"path":"2019/08/26/OpenWrt-添加开机启动任务/","link":"","permalink":"https://hexo.aragon.wang/2019/08/26/OpenWrt-添加开机启动任务/","excerpt":"","text":"OpenWrt 添加启动任务的方式有别于其他的linux系统，在尝试过程中踩了不少坑，所以整理在此处。正常Linux系统一般修改rc.local即可在开机时自动运行代码，即 vi /etc/rc.local 然后输入开机要启动的命令即可，但OpenWrt不同，其操作流程为： 1 、进入启动任务的文件夹 cd /etc/rc.d 2、创建启动文件，前面要标注启动顺序 vi S99Test 3、键入“i”进入编辑模式输入内容 #!/bin/sh /etc/rc.common # 使用shell命令必须要有 START=95 # 表示启动顺序排95，数字越大，启动越慢，可自行调整 STOP=15 # 表示停止任务排15 # 加启动任务 start(){ #此处输入你要运行的命令，需要先验证命令是否可以正常运行 } # 添加停止任务，如没必要可以不添加 stop(){ #此处输入你要运行的命令，需要先验证命令是否可以正常运行 } 4、按“ESC”退出编辑模式。键入“:wq”来保存内容并退出，此时在luci管理界-系统-启动项里面就能看到你刚添加的任务，可以输入reboot命令检验是否实现 以上就是OpenWrt添加启动任务的方法 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Openwrt","slug":"Openwrt","permalink":"https://hexo.aragon.wang/categories/Openwrt/"}],"tags":[{"name":"openwrt","slug":"openwrt","permalink":"https://hexo.aragon.wang/tags/openwrt/"},{"name":"启动任务","slug":"启动任务","permalink":"https://hexo.aragon.wang/tags/启动任务/"}]},{"title":"OpenWrt 添加自定命令（以Frpc为例）","slug":"OpenWrt-添加自定命令（以Frpc为例）","date":"2019-08-26T12:43:21.000Z","updated":"2019-08-28T04:50:20.067Z","comments":true,"path":"2019/08/26/OpenWrt-添加自定命令（以Frpc为例）/","link":"","permalink":"https://hexo.aragon.wang/2019/08/26/OpenWrt-添加自定命令（以Frpc为例）/","excerpt":"","text":"OpenWrt 在使用过程中会出现需要添加自定义命令来提升效率，在一段时间摸索以后，我写了以下脚本来实现Frpc内网穿透的需求。其他Linux系统均可以借鉴，但是文件位置可能稍有不同。 1、创建shell脚本vi frpc2.sh 2、以下为命令模板以供参考，可自行根据情况修改，键入“i”，进入编辑模式 #! /bin/sh # 此行需要根据情况修改，因为是生成shell脚本，所以此处用的是 /bin/sh # # Copyright (C) 2018 aragon # # This is free software, licensed under the GNU General Public License v3. # See /LICENSE for more information. fun_check() { # 检查当前进程状态 pid=`pidof frpc2` # 寻找进程中名含有frpc2的进程，可根据需要修改进程名 if [ -n “$pid” ];then return 0 # 如果进程不存在则返回0 else return 1 # 如果存在则返回1 fi } fun_start() { # 运行frpc程序 if fun_check; then # 调用fun_check 函数，如果为真 echo “frpc2 已经在运行。。。” # 不启动程序并提示已经在运行 else # 如果为假，运行程序 cd /root/frpc2 ./frpc2 -c frpc.ini &amp; echo “frpc2 启动！！！” fi } fun_stop() { # 停止运行程序 if fun_check; then # 调用fun_check 函数，如果为真 killall frpc2 # killall 命令中止所有还含有frpc2的进程，可根据需要修改 echo “已停止frpc2。。。” else # 返回为假则无操作并提示 echo “frpc2 并未运行。。。” fi } fun_restart() { # 重启程序，其实是先停止再启动 fun_stop fun_start } fun_status() { # 检查当前进程运行状态 if fun_check; then echo “frpc2 已在运行” else echo “frp2 并未运行” fi } fun_config() { # 查看当前frpc配置文件 vi /root/frpc2/frpc.ini } arg1=$1 # arg1 = 脚本命令后附带的命令内容。如输入 frpc2 start,则 arg1 = start [ -z ${arg1} ] # 查看 当前输入的是什么命令 case “${arg1}” in start|stop|restart|status|config) # 如果输入的命令符合则运行指定命令 fun_${arg1} ;; *) # 如果输入命令不在有效范围则提示正确指令 echo “Usage: $SCRIPTNAME {start|stop|restart|status|config}” RET_VAL=1 ;; esac #退出case语句 exit $RET_VAL #退出脚本 3、按“ESC”退出编辑模式，并键入“:wq”保存脚本4、OpenWrt中输入chmod +x /root/frpc2/frpc2.sh # 给脚本可执行权限 ln -s /root/frpc2/frpc2.sh /bin/frpc2 # 加入/bin 中，则可以直接使用 frpc2 start等来实现启动命令 ln -s /root/frpc2/frpc2.sh /etc/init.d/frpc2 # 加入/etc/init.d 中，则可以直接使用service frpc2 start等来实现启动命令 以上就是OpenWrt 添加自定命令（以Frpc为例）的全部内容，如果要实现frpc实现开机自启，可以参考这篇文章。 OpenWrt添加开机启动任务 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Openwrt","slug":"Openwrt","permalink":"https://hexo.aragon.wang/categories/Openwrt/"}],"tags":[{"name":"opnwrt","slug":"opnwrt","permalink":"https://hexo.aragon.wang/tags/opnwrt/"},{"name":"自定义指令","slug":"自定义指令","permalink":"https://hexo.aragon.wang/tags/自定义指令/"}]},{"title":"linux下使用crontab运行Python脚本的坑","slug":"linux下使用crontab运行Python脚本的坑","date":"2019-08-26T12:34:10.000Z","updated":"2019-08-28T04:50:23.328Z","comments":true,"path":"2019/08/26/linux下使用crontab运行Python脚本的坑/","link":"","permalink":"https://hexo.aragon.wang/2019/08/26/linux下使用crontab运行Python脚本的坑/","excerpt":"","text":"在使用Python脚本实现DDNS功能时发现并没有定时运行,在指令后面添加 &gt;/dev/null 2&amp;&gt;1指令，发现如下报错 00-18-01 Traceback (most recent call last): File \"/home/c2/DDNS/run.py\", line 21, in &lt;module&gt; import requests ImportError: No module named requests 脚本单独运行是正常的，但是已使用Crontab后运行异常，再一番Google后发现，是Crontab不能正确加载Python的环境变量导致，需要做如下修改： 1 直接执行Python所在路径，路径可以使用whereis python 指令来获取，所以我的指令是:/usr/bin/python3.6 #此处必须指定使用的python版本，不然报错 ` 2 使用绝对路径 /usr/bin/python3.6 /path/to/your/py/run.py包括脚本需要指定的参数包含路径的，都必须使用绝对路径 以上就是我在使用crontab实现计划任务时的遇到的问题和解决方法，希望能对你有所帮助 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"linux","slug":"linux","permalink":"https://hexo.aragon.wang/categories/linux/"}],"tags":[{"name":"python","slug":"python","permalink":"https://hexo.aragon.wang/tags/python/"},{"name":"crontab","slug":"crontab","permalink":"https://hexo.aragon.wang/tags/crontab/"}]},{"title":"Ubuntu Server 输入sudo 指令不使用密码","slug":"Ubuntu-Server-输入sudo-指令不使用密码","date":"2019-08-26T12:31:10.000Z","updated":"2019-08-28T04:50:18.925Z","comments":true,"path":"2019/08/26/Ubuntu-Server-输入sudo-指令不使用密码/","link":"","permalink":"https://hexo.aragon.wang/2019/08/26/Ubuntu-Server-输入sudo-指令不使用密码/","excerpt":"","text":"sudo 指令在使用过程中需要反复输入密码，显得很麻烦，自然要取消这恼人的设定啊，哈哈哈 sudo cp /etc/sudoers . # 备份默认配置到当前文件夹 sudo -i # 切换到root用户 visudo # 编辑sudo 配置文件，也可以用vi /etc/sudoers,不过使用vim编辑会提示不能保存只读文件 接下来就时修改配置，找到 root ALL=(ALL:ALL) ALL 在下边添加类似的一行,Your_Name是你要免密登陆的用户名 Your_Name = ALL=(ALL:ALL) NOPASSWD: ALL 接着将 %sudo ALL=(ALL:ALL) ALL 修改为 %sudo ALL=(ALL:ALL) NOPASSWD: ALL 保存后退出重新登陆，使用 sudo ls测试就会发现不需要输入密码了。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"linux","slug":"linux","permalink":"https://hexo.aragon.wang/categories/linux/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://hexo.aragon.wang/tags/ubuntu/"},{"name":"sudo","slug":"sudo","permalink":"https://hexo.aragon.wang/tags/sudo/"},{"name":"不输入密码","slug":"不输入密码","permalink":"https://hexo.aragon.wang/tags/不输入密码/"}]},{"title":"OpenWrt 挂载局域网SAMBA共享文件夹","slug":"OpenWrt-挂载局域网SAMBA共享文件夹","date":"2019-08-26T12:26:33.000Z","updated":"2019-08-28T04:50:22.669Z","comments":true,"path":"2019/08/26/OpenWrt-挂载局域网SAMBA共享文件夹/","link":"","permalink":"https://hexo.aragon.wang/2019/08/26/OpenWrt-挂载局域网SAMBA共享文件夹/","excerpt":"","text":"OpenWrt在挂载局域网共享文件夹可以有效减少磁盘空间占用，实现无限扩容的可能，在操作中踩了不少坑，所以记录下来： 操作指令首先安装相关套件cifsmount opkg update # 更新软件列表 opkg install cifsmount # 安装cifsmount 没有报错即为成功 挂载文件夹此处挂载局域网192.168.1.40的share文件夹到 OpenWrt中的/root/shar文件夹 mount.cifs //192.168.1.40/share /root/share -o user=your_name,pass=your_password,vers=1.0,sec=ntlm 因为OpenWrt的mount命令版本比较低，此处的 vers=1.0是必须的,sec=ntlm也是必须的加密选项，不过需要根据网络不同配置不同的加密选项 取消挂载如果想取消挂载，仅需要取消取消挂载点就可以了umount /root/share 期间碰到的坑：mount error(22): Invalid argument Refer to the mount.cifs(8) manual page (e.g. man mount.cifs) 意思为参数错误，原因是后面的 user=your_name,pass=your_password 后面没有添加 vers=1.0,sec=ntlm document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Openwrt","slug":"Openwrt","permalink":"https://hexo.aragon.wang/categories/Openwrt/"}],"tags":[{"name":"openwrt","slug":"openwrt","permalink":"https://hexo.aragon.wang/tags/openwrt/"},{"name":"smb","slug":"smb","permalink":"https://hexo.aragon.wang/tags/smb/"}]},{"title":"UBUNTU+Apache2 强制开启https访问的方法","slug":"UBUNTU-Apache2-强制开启https访问的方法","date":"2019-08-26T12:19:02.000Z","updated":"2019-08-28T04:50:19.505Z","comments":true,"path":"2019/08/26/UBUNTU-Apache2-强制开启https访问的方法/","link":"","permalink":"https://hexo.aragon.wang/2019/08/26/UBUNTU-Apache2-强制开启https访问的方法/","excerpt":"","text":"在使用Let’s encrypt 申请下来的免费证书在简单设置以后，还需要进行简单设置才能实现强制HTTPS访问，以下是使用 .htaccess 的方法来实现： 1. 使能 .htaccess 文件sudo vi /etc/apache2/apache2.conf 找到以下内容 &lt;Directory /var/www/&gt; Options Indexes FollowSymLinks AllowOverride all Require all granted &lt;/Directory&gt; 确认 AllowOverride all 这行是这样就可以了,保存后输入以下命令 sudo a2enmod rewrite sudo a2enmod headers sudo service apache2 restart 命令作用：打开重定位功能并重启apache2 2. 修改.htaccess 文件输入sudo vi /var/www/html/你的网站根目录/.htaccess 找到以下内容RewriteEngine On在下面输入如下内容： RewriteCond %{HTTPS} !=on # 重定位规则：如果不是HTTPS RewriteRule ^(.*) https://%{SERVER_NAME}$1 [L,R] # 执行操作：跳转使用https访问 如上就是强制HTTPS访问的方法了，希望对你有帮助。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"linux","slug":"linux","permalink":"https://hexo.aragon.wang/categories/linux/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://hexo.aragon.wang/tags/ubuntu/"},{"name":"apache2","slug":"apache2","permalink":"https://hexo.aragon.wang/tags/apache2/"},{"name":"强制https","slug":"强制https","permalink":"https://hexo.aragon.wang/tags/强制https/"}]},{"title":"Ubuntu+apache2 网站添加用户访问验证","slug":"Ubuntu+apache2 网站添加用户访问验证","date":"2019-08-26T12:14:08.000Z","updated":"2019-08-28T04:50:18.168Z","comments":true,"path":"2019/08/26/Ubuntu+apache2 网站添加用户访问验证/","link":"","permalink":"https://hexo.aragon.wang/2019/08/26/Ubuntu+apache2 网站添加用户访问验证/","excerpt":"","text":"在一些比较特殊的网站需要添加用户验证的功能，下面是使用.htaccess文件的方法实现用户验证 1. 安装apache-utilssudo apt-get update sudo apt-get install apache2-utils 2. 生成 .htpasswd 文件推荐在网站根目录下生成.htpasswd 文件保存密码 touch /var/www/html/网站根目录/.htpasswd # 生成 .htpasswd 文件 sudo htpasswd -c /var/www/html/网站根目录/.htpasswd 验证用户名 验证用户名需要自行修改，重复两次后完成密码生成 3. 使能 .htaccess 文件sudo vi /etc/apache2/apache2.conf找到以下内容 &lt;Directory /var/www/&gt; Options Indexes FollowSymLinks AllowOverride all Require all granted &lt;/Directory&gt; 确认 AllowOverride all 这行是这样就可以了,保存后输入以下命令 sudo service apache2 restart命令作用：重启apache2 4. 修改.htaccess 文件在.htaccess 文件的最后加入如下内容： AuthType Basic AuthName \"Restricted Content\" AuthUserFile /var/www/html/网站根目录/.htpasswd Require valid-user 保存后退出 5. 验证直接访问网站，会弹出验证验证信息： 如果验证错误会出现如下信息： 以上就是apache2 添加用户验证的方法，希望对你有帮助。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"linux","slug":"linux","permalink":"https://hexo.aragon.wang/categories/linux/"}],"tags":[{"name":"apache","slug":"apache","permalink":"https://hexo.aragon.wang/tags/apache/"},{"name":"验证","slug":"验证","permalink":"https://hexo.aragon.wang/tags/验证/"}]},{"title":"OpenWrt 设置静态路由实现跨网段访问","slug":"OpenWrt-设置静态路由实现跨网段访问","date":"2019-08-26T12:00:36.000Z","updated":"2019-08-28T04:50:21.989Z","comments":true,"path":"2019/08/26/OpenWrt-设置静态路由实现跨网段访问/","link":"","permalink":"https://hexo.aragon.wang/2019/08/26/OpenWrt-设置静态路由实现跨网段访问/","excerpt":"","text":"原因由于软路由无线功能实在弟弟，只能使用无线路由作为AP使用，实际使用中发现光是作为旁路路由的话，如果软路由挂了（升级维护重启之类的），无线路由下挂的所有路由均会导致网关指向路由，需要重新启动wifi才能上网，如果使用智能家居设备的话非常麻烦，所以使用无线路由nat是最好的方法。 image.png 如图，正常情况下，路由器B作为nat,所以下面的设备可以访问路由器A上的资源，而路由A下面的设备不能访问路由B下面的设备，要怎么办呢？ 解决方法很简单，在路由A设置一个静态路由即可实现。设置方法如下： image.png 这样就可以很方便的让路由A访问路由下的资源，且路由A扑街后也不影响路由B下的设备状态。 路由B一定要开启相应的防火墙规则 路由B一定要开启相应的防火墙规则 路由B一定要开启相应的防火墙规则 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Openwrt","slug":"Openwrt","permalink":"https://hexo.aragon.wang/categories/Openwrt/"}],"tags":[{"name":"openwrt","slug":"openwrt","permalink":"https://hexo.aragon.wang/tags/openwrt/"},{"name":"跨网段访问","slug":"跨网段访问","permalink":"https://hexo.aragon.wang/tags/跨网段访问/"}]},{"title":"OpenWrt 使用PY脚本实现DDNS","slug":"OpenWrt-使用PY脚本实现DDNS","date":"2019-08-26T07:57:08.000Z","updated":"2019-08-28T04:50:21.308Z","comments":true,"path":"2019/08/26/OpenWrt-使用PY脚本实现DDNS/","link":"","permalink":"https://hexo.aragon.wang/2019/08/26/OpenWrt-使用PY脚本实现DDNS/","excerpt":"","text":"虽然KoolShare OpenWrt 有自带的DDNS功能，但不能实现多域名解析和对IPv6 的DDNS有问题，在找了一圈后，发现NewFuture大佬的DDNS十分好用，遂有以下记录。脚本链接：自动更新域名解析到本机IP(支持dnspod,阿里DNS,CloudFlare,DNSCOM…) 下载脚本git clone https://github.com/NewFuture/DDNS.git 从GitHub上直接复制下来，简单方便，会在root路径下出现DDNS文件夹 修改配置vi /root/DDNS/config.json 按“i”键开始输入，光标移动修改，下面以阿里DDNS为例: 里面的注释信息请勿复制进脚本 { \"debug\": \"false\", # 调试模式，解析时会输出更多信息 \"dns\": \"alidns\", # 选择DNS服务提供商，\"dnspod 或 dnspod_com 或 alidns 或 dnscom 或 cloudflare\"均可 \"id\": \"your ID\", # 从阿里云获取的Access Key ID \"token\": \"your Secret\", #从阿里云获取的Access Key Secret \"index4\": \"default\", # IPv4解析方式，一般使用Default即可满足要求，不成功则需要访问Git地址上设置别的值 \"index6\": \"default\", # IPv6解析方式，一般使用Default即可满足要求，不成功则需要访问Git地址上设置别的值 \"ipv4\": [\"your.domain.com\", # IPv4解析域名组 \"your.domain.com\"], \"ipv6\": [\"your.domain.com\", # IPv6解析域名组 \"your.domain.com\"], \"proxy\": null # 不使用代理 } 键入“ESC” 退出编辑，输入”:wq”保存配置并退出。 添加计划任务进入OpenWrt后台，找到 系统-计划任务，在右边文本框输入以下内容： /5 * /root/DDNS/run.py -c config.json意思是每5分钟更新一次DDNS信息，如果重复不会覆盖。有需要可以修改5来增减解析间隔时间。 以上就是利用NewFuture大佬的DDNS脚本在OpenWrt上实现多域名解析的方法，希望对你有所帮助。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Openwrt","slug":"Openwrt","permalink":"https://hexo.aragon.wang/categories/Openwrt/"}],"tags":[{"name":"openwrt","slug":"openwrt","permalink":"https://hexo.aragon.wang/tags/openwrt/"},{"name":"DDNS","slug":"DDNS","permalink":"https://hexo.aragon.wang/tags/DDNS/"},{"name":"python","slug":"python","permalink":"https://hexo.aragon.wang/tags/python/"}]}]}
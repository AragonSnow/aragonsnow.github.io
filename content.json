{"meta":{"title":"Aragon's Blog","subtitle":"Mark Something","description":"Aragon's Blog","author":"AragonSnow","url":"https://hexo.aragon.wang","root":"/"},"pages":[{"title":"404 Not Found","date":"2019-08-26T21:39:29.000Z","updated":"2019-08-26T21:41:22.994Z","comments":true,"path":"404.html","permalink":"https://hexo.aragon.wang/404.html","excerpt":"","text":"404 Not Found 很抱歉，您访问的页面不存在可能是输入地址有误或该地址已被删除 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"about","date":"2019-08-26T15:11:31.000Z","updated":"2019-08-26T15:12:09.987Z","comments":true,"path":"about/index.html","permalink":"https://hexo.aragon.wang/about/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"friends","date":"2019-08-26T15:35:31.000Z","updated":"2019-08-26T15:35:31.124Z","comments":true,"path":"friends/index.html","permalink":"https://hexo.aragon.wang/friends/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"categories","date":"2019-08-26T15:00:26.000Z","updated":"2019-08-27T05:32:04.501Z","comments":false,"path":"categories/index.html","permalink":"https://hexo.aragon.wang/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tags","date":"2019-08-26T15:35:50.000Z","updated":"2019-08-27T04:18:23.725Z","comments":false,"path":"tags/index.html","permalink":"https://hexo.aragon.wang/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"OpenWrt 添加开机启动任务","slug":"OpenWrt-添加开机启动任务","date":"2019-08-26T12:50:10.000Z","updated":"2019-08-26T21:30:13.678Z","comments":true,"path":"2019/08/26/openwrt-tian-jia-kai-ji-qi-dong-ren-wu/","link":"","permalink":"https://hexo.aragon.wang/2019/08/26/openwrt-tian-jia-kai-ji-qi-dong-ren-wu/","excerpt":"","text":"OpenWrt 添加启动任务的方式有别于其他的linux系统，在尝试过程中踩了不少坑，所以整理在此处。正常Linux系统一般修改rc.local即可在开机时自动运行代码，即 vi /etc/rc.local 然后输入开机要启动的命令即可，但OpenWrt不同，其操作流程为： 1 、进入启动任务的文件夹 cd /etc/rc.d 2、创建启动文件，前面要标注启动顺序 vi S99Test 3、键入“i”进入编辑模式输入内容 #!/bin/sh /etc/rc.common # 使用shell命令必须要有 START=95 # 表示启动顺序排95，数字越大，启动越慢，可自行调整 STOP=15 # 表示停止任务排15 # 加启动任务 start(){ #此处输入你要运行的命令，需要先验证命令是否可以正常运行 } # 添加停止任务，如没必要可以不添加 stop(){ #此处输入你要运行的命令，需要先验证命令是否可以正常运行 } 4、按“ESC”退出编辑模式。键入“:wq”来保存内容并退出，此时在luci管理界-系统-启动项里面就能看到你刚添加的任务，可以输入reboot命令检验是否实现 以上就是OpenWrt添加启动任务的方法 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"openwrt","slug":"openwrt","permalink":"https://hexo.aragon.wang/tags/openwrt/"},{"name":"启动任务","slug":"启动任务","permalink":"https://hexo.aragon.wang/tags/启动任务/"}]},{"title":"OpenWrt 添加自定命令（以Frpc为例）","slug":"OpenWrt-添加自定命令（以Frpc为例）","date":"2019-08-26T12:43:21.000Z","updated":"2019-08-26T13:25:59.450Z","comments":true,"path":"2019/08/26/openwrt-tian-jia-zi-ding-ming-ling-yi-frpc-wei-li/","link":"","permalink":"https://hexo.aragon.wang/2019/08/26/openwrt-tian-jia-zi-ding-ming-ling-yi-frpc-wei-li/","excerpt":"","text":"OpenWrt 在使用过程中会出现需要添加自定义命令来提升效率，在一段时间摸索以后，我写了以下脚本来实现Frpc内网穿透的需求。其他Linux系统均可以借鉴，但是文件位置可能稍有不同。 1、创建shell脚本vi frpc2.sh 2、以下为命令模板以供参考，可自行根据情况修改，键入“i”，进入编辑模式 #! /bin/sh # 此行需要根据情况修改，因为是生成shell脚本，所以此处用的是 /bin/sh # # Copyright (C) 2018 aragon # # This is free software, licensed under the GNU General Public License v3. # See /LICENSE for more information. fun_check() { # 检查当前进程状态 pid=`pidof frpc2` # 寻找进程中名含有frpc2的进程，可根据需要修改进程名 if [ -n “$pid” ];then return 0 # 如果进程不存在则返回0 else return 1 # 如果存在则返回1 fi } fun_start() { # 运行frpc程序 if fun_check; then # 调用fun_check 函数，如果为真 echo “frpc2 已经在运行。。。” # 不启动程序并提示已经在运行 else # 如果为假，运行程序 cd /root/frpc2 ./frpc2 -c frpc.ini &amp; echo “frpc2 启动！！！” fi } fun_stop() { # 停止运行程序 if fun_check; then # 调用fun_check 函数，如果为真 killall frpc2 # killall 命令中止所有还含有frpc2的进程，可根据需要修改 echo “已停止frpc2。。。” else # 返回为假则无操作并提示 echo “frpc2 并未运行。。。” fi } fun_restart() { # 重启程序，其实是先停止再启动 fun_stop fun_start } fun_status() { # 检查当前进程运行状态 if fun_check; then echo “frpc2 已在运行” else echo “frp2 并未运行” fi } fun_config() { # 查看当前frpc配置文件 vi /root/frpc2/frpc.ini } arg1=$1 # arg1 = 脚本命令后附带的命令内容。如输入 frpc2 start,则 arg1 = start [ -z ${arg1} ] # 查看 当前输入的是什么命令 case “${arg1}” in start|stop|restart|status|config) # 如果输入的命令符合则运行指定命令 fun_${arg1} ;; *) # 如果输入命令不在有效范围则提示正确指令 echo “Usage: $SCRIPTNAME {start|stop|restart|status|config}” RET_VAL=1 ;; esac #退出case语句 exit $RET_VAL #退出脚本 3、按“ESC”退出编辑模式，并键入“:wq”保存脚本4、OpenWrt中输入chmod +x /root/frpc2/frpc2.sh # 给脚本可执行权限 ln -s /root/frpc2/frpc2.sh /bin/frpc2 # 加入/bin 中，则可以直接使用 frpc2 start等来实现启动命令 ln -s /root/frpc2/frpc2.sh /etc/init.d/frpc2 # 加入/etc/init.d 中，则可以直接使用service frpc2 start等来实现启动命令 以上就是OpenWrt 添加自定命令（以Frpc为例）的全部内容，如果要实现frpc实现开机自启，可以参考这篇文章。 OpenWrt添加开机启动任务 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"opnwrt","slug":"opnwrt","permalink":"https://hexo.aragon.wang/tags/opnwrt/"},{"name":"自定义指令","slug":"自定义指令","permalink":"https://hexo.aragon.wang/tags/自定义指令/"}]},{"title":"linux下使用crontab运行Python脚本的坑","slug":"linux下使用crontab运行Python脚本的坑","date":"2019-08-26T12:34:10.000Z","updated":"2019-08-27T04:04:25.216Z","comments":true,"path":"2019/08/26/linux-xia-shi-yong-crontab-yun-xing-python-jiao-ben-de-keng/","link":"","permalink":"https://hexo.aragon.wang/2019/08/26/linux-xia-shi-yong-crontab-yun-xing-python-jiao-ben-de-keng/","excerpt":"","text":"在使用Python脚本实现DDNS功能时发现并没有定时运行,在指令后面添加 &gt;/dev/null 2&amp;&gt;1指令，发现如下报错 00-18-01 Traceback (most recent call last): File \"/home/c2/DDNS/run.py\", line 21, in &lt;module&gt; import requests ImportError: No module named requests 脚本单独运行是正常的，但是已使用Crontab后运行异常，再一番Google后发现，是Crontab不能正确加载Python的环境变量导致，需要做如下修改： 1 直接执行Python所在路径，路径可以使用whereis python 指令来获取，所以我的指令是:/usr/bin/python3.6 #此处必须指定使用的python版本，不然报错 ` 2 使用绝对路径 /usr/bin/python3.6 /path/to/your/py/run.py包括脚本需要指定的参数包含路径的，都必须使用绝对路径 以上就是我在使用crontab实现计划任务时的遇到的问题和解决方法，希望能对你有所帮助 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://hexo.aragon.wang/tags/python/"},{"name":"crontab","slug":"crontab","permalink":"https://hexo.aragon.wang/tags/crontab/"}]},{"title":"Ubuntu Server 输入sudo 指令不使用密码","slug":"Ubuntu-Server-输入sudo-指令不使用密码","date":"2019-08-26T12:31:10.000Z","updated":"2019-08-26T12:42:00.903Z","comments":true,"path":"2019/08/26/ubuntu-server-shu-ru-sudo-zhi-ling-bu-shi-yong-mi-ma/","link":"","permalink":"https://hexo.aragon.wang/2019/08/26/ubuntu-server-shu-ru-sudo-zhi-ling-bu-shi-yong-mi-ma/","excerpt":"","text":"sudo 指令在使用过程中需要反复输入密码，显得很麻烦，自然要取消这恼人的设定啊，哈哈哈 sudo cp /etc/sudoers . # 备份默认配置到当前文件夹 sudo -i # 切换到root用户 visudo # 编辑sudo 配置文件，也可以用vi /etc/sudoers,不过使用vim编辑会提示不能保存只读文件 接下来就时修改配置，找到 root ALL=(ALL:ALL) ALL 在下边添加类似的一行,Your_Name是你要免密登陆的用户名 Your_Name = ALL=(ALL:ALL) NOPASSWD: ALL 接着将 %sudo ALL=(ALL:ALL) ALL 修改为 %sudo ALL=(ALL:ALL) NOPASSWD: ALL 保存后退出重新登陆，使用 sudo ls测试就会发现不需要输入密码了。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://hexo.aragon.wang/tags/ubuntu/"},{"name":"sudo","slug":"sudo","permalink":"https://hexo.aragon.wang/tags/sudo/"},{"name":"不输入密码","slug":"不输入密码","permalink":"https://hexo.aragon.wang/tags/不输入密码/"}]},{"title":"OpenWrt 挂载局域网SAMBA共享文件夹","slug":"OpenWrt-挂载局域网SAMBA共享文件夹","date":"2019-08-26T12:26:33.000Z","updated":"2019-08-27T03:02:28.346Z","comments":true,"path":"2019/08/26/openwrt-gua-zai-ju-yu-wang-samba-gong-xiang-wen-jian-jia/","link":"","permalink":"https://hexo.aragon.wang/2019/08/26/openwrt-gua-zai-ju-yu-wang-samba-gong-xiang-wen-jian-jia/","excerpt":"","text":"OpenWrt在挂载局域网共享文件夹可以有效减少磁盘空间占用，实现无限扩容的可能，在操作中踩了不少坑，所以记录下来： 操作指令首先安装相关套件cifsmount opkg update # 更新软件列表 opkg install cifsmount # 安装cifsmount 没有报错即为成功 挂载文件夹此处挂载局域网192.168.1.40的share文件夹到 OpenWrt中的/root/shar文件夹 mount.cifs //192.168.1.40/share /root/share -o user=your_name,pass=your_password,vers=1.0,sec=ntlm 因为OpenWrt的mount命令版本比较低，此处的 vers=1.0是必须的,sec=ntlm也是必须的加密选项，不过需要根据网络不同配置不同的加密选项 取消挂载如果想取消挂载，仅需要取消取消挂载点就可以了umount /root/share 期间碰到的坑：mount error(22): Invalid argument Refer to the mount.cifs(8) manual page (e.g. man mount.cifs) 意思为参数错误，原因是后面的 user=your_name,pass=your_password 后面没有添加 vers=1.0,sec=ntlm document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"openwrt","slug":"openwrt","permalink":"https://hexo.aragon.wang/tags/openwrt/"},{"name":"smb","slug":"smb","permalink":"https://hexo.aragon.wang/tags/smb/"}]},{"title":"UBUNTU+Apache2 强制开启https访问的方法","slug":"UBUNTU-Apache2-强制开启https访问的方法","date":"2019-08-26T12:19:02.000Z","updated":"2019-08-26T12:25:35.015Z","comments":true,"path":"2019/08/26/ubuntu-apache2-qiang-zhi-kai-qi-https-fang-wen-de-fang-fa/","link":"","permalink":"https://hexo.aragon.wang/2019/08/26/ubuntu-apache2-qiang-zhi-kai-qi-https-fang-wen-de-fang-fa/","excerpt":"","text":"在使用Let’s encrypt 申请下来的免费证书在简单设置以后，还需要进行简单设置才能实现强制HTTPS访问，以下是使用 .htaccess 的方法来实现： 1. 使能 .htaccess 文件sudo vi /etc/apache2/apache2.conf 找到以下内容 &lt;Directory /var/www/&gt; Options Indexes FollowSymLinks AllowOverride all Require all granted &lt;/Directory&gt; 确认 AllowOverride all 这行是这样就可以了,保存后输入以下命令 sudo a2enmod rewrite sudo a2enmod headers sudo service apache2 restart 命令作用：打开重定位功能并重启apache2 2. 修改.htaccess 文件输入sudo vi /var/www/html/你的网站根目录/.htaccess 找到以下内容RewriteEngine On在下面输入如下内容： RewriteCond %{HTTPS} !=on # 重定位规则：如果不是HTTPS RewriteRule ^(.*) https://%{SERVER_NAME}$1 [L,R] # 执行操作：跳转使用https访问 如上就是强制HTTPS访问的方法了，希望对你有帮助。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"Ubuntu+apache2 网站添加用户访问验证","slug":"Ubuntu+apache2 网站添加用户访问验证","date":"2019-08-26T12:14:08.000Z","updated":"2019-08-27T11:54:04.002Z","comments":true,"path":"2019/08/26/ubuntu-apache2-wang-zhan-tian-jia-yong-hu-fang-wen-yan-zheng/","link":"","permalink":"https://hexo.aragon.wang/2019/08/26/ubuntu-apache2-wang-zhan-tian-jia-yong-hu-fang-wen-yan-zheng/","excerpt":"","text":"在一些比较特殊的网站需要添加用户验证的功能，下面是使用.htaccess文件的方法实现用户验证 1. 安装apache-utilssudo apt-get update sudo apt-get install apache2-utils 2. 生成 .htpasswd 文件推荐在网站根目录下生成.htpasswd 文件保存密码 touch /var/www/html/网站根目录/.htpasswd # 生成 .htpasswd 文件 sudo htpasswd -c /var/www/html/网站根目录/.htpasswd 验证用户名 验证用户名需要自行修改，重复两次后完成密码生成 3. 使能 .htaccess 文件sudo vi /etc/apache2/apache2.conf找到以下内容 &lt;Directory /var/www/&gt; Options Indexes FollowSymLinks AllowOverride all Require all granted &lt;/Directory&gt; 确认 AllowOverride all 这行是这样就可以了,保存后输入以下命令 sudo service apache2 restart命令作用：重启apache2 4. 修改.htaccess 文件在.htaccess 文件的最后加入如下内容： AuthType Basic AuthName \"Restricted Content\" AuthUserFile /var/www/html/网站根目录/.htpasswd Require valid-user 保存后退出 5. 验证直接访问网站，会弹出验证验证信息： 如果验证错误会出现如下信息： 以上就是apache2 添加用户验证的方法，希望对你有帮助。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"apache","slug":"apache","permalink":"https://hexo.aragon.wang/tags/apache/"},{"name":"验证","slug":"验证","permalink":"https://hexo.aragon.wang/tags/验证/"}]},{"title":"OpenWrt 设置静态路由实现跨网段访问","slug":"OpenWrt-设置静态路由实现跨网段访问","date":"2019-08-26T12:00:36.000Z","updated":"2019-08-27T14:07:52.965Z","comments":true,"path":"2019/08/26/openwrt-she-zhi-jing-tai-lu-you-shi-xian-kua-wang-duan-fang-wen/","link":"","permalink":"https://hexo.aragon.wang/2019/08/26/openwrt-she-zhi-jing-tai-lu-you-shi-xian-kua-wang-duan-fang-wen/","excerpt":"","text":"原因由于软路由无线功能实在弟弟，只能使用无线路由作为AP使用，实际使用中发现光是作为旁路路由的话，如果软路由挂了（升级维护重启之类的），无线路由下挂的所有路由均会导致网关指向路由，需要重新启动wifi才能上网，如果使用智能家居设备的话非常麻烦，所以使用无线路由nat是最好的方法。 如图，正常情况下，路由器B作为nat,所以下面的设备可以访问路由器A上的资源，而路由A下面的设备不能访问路由B下面的设备，要怎么办呢？ 解决方法很简单，在路由A设置一个静态路由即可实现。设置方法如下： 这样就可以很方便的让路由A访问路由下的资源，且路由A扑街后也不影响路由B下的设备状态。 路由B一定要开启相应的防火墙规则 路由B一定要开启相应的防火墙规则 路由B一定要开启相应的防火墙规则 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"openwrt","slug":"openwrt","permalink":"https://hexo.aragon.wang/tags/openwrt/"},{"name":"跨网段访问","slug":"跨网段访问","permalink":"https://hexo.aragon.wang/tags/跨网段访问/"}]},{"title":"OpenWrt 使用PY脚本实现DDNS","slug":"OpenWrt-使用PY脚本实现DDNS","date":"2019-08-26T07:57:08.000Z","updated":"2019-08-26T11:11:49.202Z","comments":true,"path":"2019/08/26/openwrt-shi-yong-py-jiao-ben-shi-xian-ddns/","link":"","permalink":"https://hexo.aragon.wang/2019/08/26/openwrt-shi-yong-py-jiao-ben-shi-xian-ddns/","excerpt":"","text":"虽然KoolShare OpenWrt 有自带的DDNS功能，但不能实现多域名解析和对IPv6 的DDNS有问题，在找了一圈后，发现NewFuture大佬的DDNS十分好用，遂有以下记录。脚本链接：自动更新域名解析到本机IP(支持dnspod,阿里DNS,CloudFlare,DNSCOM…) 下载脚本git clone https://github.com/NewFuture/DDNS.git 从GitHub上直接复制下来，简单方便，会在root路径下出现DDNS文件夹 修改配置vi /root/DDNS/config.json 按“i”键开始输入，光标移动修改，下面以阿里DDNS为例: 里面的注释信息请勿复制进脚本 { \"debug\": \"false\", # 调试模式，解析时会输出更多信息 \"dns\": \"alidns\", # 选择DNS服务提供商，\"dnspod 或 dnspod_com 或 alidns 或 dnscom 或 cloudflare\"均可 \"id\": \"your ID\", # 从阿里云获取的Access Key ID \"token\": \"your Secret\", #从阿里云获取的Access Key Secret \"index4\": \"default\", # IPv4解析方式，一般使用Default即可满足要求，不成功则需要访问Git地址上设置别的值 \"index6\": \"default\", # IPv6解析方式，一般使用Default即可满足要求，不成功则需要访问Git地址上设置别的值 \"ipv4\": [\"your.domain.com\", # IPv4解析域名组 \"your.domain.com\"], \"ipv6\": [\"your.domain.com\", # IPv6解析域名组 \"your.domain.com\"], \"proxy\": null # 不使用代理 } 键入“ESC” 退出编辑，输入”:wq”保存配置并退出。 添加计划任务进入OpenWrt后台，找到 系统-计划任务，在右边文本框输入以下内容： /5 * /root/DDNS/run.py -c config.json意思是每5分钟更新一次DDNS信息，如果重复不会覆盖。有需要可以修改5来增减解析间隔时间。 以上就是利用NewFuture大佬的DDNS脚本在OpenWrt上实现多域名解析的方法，希望对你有所帮助。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"openwrt","slug":"openwrt","permalink":"https://hexo.aragon.wang/tags/openwrt/"},{"name":"DDNS","slug":"DDNS","permalink":"https://hexo.aragon.wang/tags/DDNS/"},{"name":"python","slug":"python","permalink":"https://hexo.aragon.wang/tags/python/"}]}]}
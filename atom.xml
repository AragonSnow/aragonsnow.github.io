<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aragon&#39;s Blog</title>
  
  <subtitle>Mark Something</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-26T12:55:17.253Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>AragonSnow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenWrt 添加开机启动任务</title>
    <link href="http://yoursite.com/2019/08/26/OpenWrt-%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/08/26/OpenWrt-添加开机启动任务/</id>
    <published>2019-08-26T12:50:10.000Z</published>
    <updated>2019-08-26T12:55:17.253Z</updated>
    
    <content type="html"><![CDATA[<p>OpenWrt 添加启动任务的方式有别于其他的linux系统，在尝试过程中踩了不少坑，所以整理在此处。<br>正常Linux系统一般修改rc.local即可在开机时自动运行代码，即</p><p><code>vi /etc/rc.local</code></p><p>然后输入开机要启动的命令即可，但OpenWrt不同，其操作流程为：</p><ul><li>1 、进入启动任务的文件夹</li></ul><p><code>cd /etc/rc.d</code></p><ul><li>2、创建启动文件，前面要标注启动顺序</li></ul><p><code>vi S99Test</code></p><ul><li>3、键入“i”进入编辑模式输入内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> #!/bin/sh /etc/rc.common # 使用shell命令必须要有</span><br><span class="line">START=95 # 表示启动顺序排95，数字越大，启动越慢，可自行调整</span><br><span class="line">STOP=15 # 表示停止任务排15</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 加启动任务</span><br><span class="line">start()&#123;</span><br><span class="line">    #此处输入你要运行的命令，需要先验证命令是否可以正常运行</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 添加停止任务，如没必要可以不添加</span><br><span class="line">stop()&#123;</span><br><span class="line">    #此处输入你要运行的命令，需要先验证命令是否可以正常运行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>4、按“ESC”退出编辑模式。键入“:wq”来保存内容并退出，此时在luci管理界-系统-启动项里面就能看到你刚添加的任务，可以输入reboot命令检验是否实现</li></ul><p>以上就是OpenWrt添加启动任务的方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;OpenWrt 添加启动任务的方式有别于其他的linux系统，在尝试过程中踩了不少坑，所以整理在此处。&lt;br&gt;正常Linux系统一般修改rc.local即可在开机时自动运行代码，即&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vi /etc/rc.local&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后
      
    
    </summary>
    
    
      <category term="openwrt" scheme="http://yoursite.com/tags/openwrt/"/>
    
      <category term="启动任务" scheme="http://yoursite.com/tags/%E5%90%AF%E5%8A%A8%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt 添加自定命令（以Frpc为例）</title>
    <link href="http://yoursite.com/2019/08/26/OpenWrt-%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E5%91%BD%E4%BB%A4%EF%BC%88%E4%BB%A5Frpc%E4%B8%BA%E4%BE%8B%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/26/OpenWrt-添加自定命令（以Frpc为例）/</id>
    <published>2019-08-26T12:43:21.000Z</published>
    <updated>2019-08-26T12:49:22.901Z</updated>
    
    <content type="html"><![CDATA[<p>OpenWrt 在使用过程中会出现需要添加自定义命令来提升效率，在一段时间摸索以后，我写了以下脚本来实现Frpc内网穿透的需求。<br>其他Linux系统均可以借鉴，但是文件位置可能稍有不同。</p><ul><li>1、创建shell脚本<figure class="highlight plain"><figcaption><span>frpc2.sh```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 2、以下为命令模板以供参考，可自行根据情况修改，键入“i”，进入编辑模式</span><br></pre></td></tr></table></figure></li></ul><p>#! /bin/sh # 此行需要根据情况修改，因为是生成shell脚本，所以此处用的是 /bin/sh<br>#</p><h1 id="Copyright-C-2018-aragon"><a href="#Copyright-C-2018-aragon" class="headerlink" title="Copyright (C) 2018 aragon"></a>Copyright (C) 2018 aragon</h1><p>#</p><h1 id="This-is-free-software-licensed-under-the-GNU-General-Public-License-v3"><a href="#This-is-free-software-licensed-under-the-GNU-General-Public-License-v3" class="headerlink" title="This is free software, licensed under the GNU General Public License v3."></a>This is free software, licensed under the GNU General Public License v3.</h1><h1 id="See-LICENSE-for-more-information"><a href="#See-LICENSE-for-more-information" class="headerlink" title="See /LICENSE for more information."></a>See /LICENSE for more information.</h1><p>fun_check() { # 检查当前进程状态<br>pid=<code>pidof frpc2</code> # 寻找进程中名含有frpc2的进程，可根据需要修改进程名<br>if [ -n “$pid” ];then<br>return 0 # 如果进程不存在则返回0<br>else<br>return 1 # 如果存在则返回1<br>fi<br>}</p><p>fun_start() { # 运行frpc程序<br>if fun_check; then # 调用fun_check 函数，如果为真<br>echo “frpc2 已经在运行。。。” # 不启动程序并提示已经在运行<br>else # 如果为假，运行程序<br>cd /root/frpc2<br>./frpc2 -c frpc.ini &amp;<br>echo “frpc2 启动！！！”<br>fi<br>}</p><p>fun_stop() { # 停止运行程序<br>if fun_check; then # 调用fun_check 函数，如果为真<br>killall frpc2 # killall 命令中止所有还含有frpc2的进程，可根据需要修改<br>echo “已停止frpc2。。。”<br>else # 返回为假则无操作并提示<br>echo “frpc2 并未运行。。。”<br>fi<br>}</p><p>fun_restart() { # 重启程序，其实是先停止再启动<br>fun_stop<br>fun_start<br>}</p><p>fun_status() { # 检查当前进程运行状态<br>if fun_check; then<br>echo “frpc2 已在运行”<br>else<br>echo “frp2 并未运行”<br>fi<br>}</p><p>fun_config() { # 查看当前frpc配置文件<br>vi /root/frpc2/frpc.ini<br>}</p><p>arg1=$1 # arg1 = 脚本命令后附带的命令内容。如输入 frpc2 start,则 arg1 = start<br>[ -z ${arg1} ] # 查看 当前输入的是什么命令<br>case “${arg1}” in<br>start|stop|restart|status|config) # 如果输入的命令符合则运行指定命令<br>fun_${arg1}<br>;;<br>*) # 如果输入命令不在有效范围则提示正确指令<br>echo “Usage: $SCRIPTNAME {start|stop|restart|status|config}”<br>RET_VAL=1<br>;;<br>esac #退出case语句<br>exit $RET_VAL #退出脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 3、按“ESC”退出编辑模式，并键入“:wq”保存脚本</span><br><span class="line"></span><br><span class="line">- 4、OpenWrt中输入</span><br></pre></td></tr></table></figure><p>chmod +x /root/frpc2/frpc2.sh # 给脚本可执行权限<br>ln -s /root/frpc2/frpc2.sh /bin/frpc2 # 加入/bin 中，则可以直接使用 frpc2 start等来实现启动命令<br>ln -s /root/frpc2/frpc2.sh /etc/init.d/frpc2 # 加入/etc/init.d 中，则可以直接使用service frpc2 start等来实现启动命令<br><code>`</code></p><p>以上就是OpenWrt 添加自定命令（以Frpc为例）的全部内容，如果要实现frpc实现开机自启，可以参考这篇文章。</p><p><a href="https://wp.aragon.wang/archives/28 “OpenWrt添加开机启动任务”" target="_blank" rel="noopener">OpenWrt添加开机启动任务</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;OpenWrt 在使用过程中会出现需要添加自定义命令来提升效率，在一段时间摸索以后，我写了以下脚本来实现Frpc内网穿透的需求。&lt;br&gt;其他Linux系统均可以借鉴，但是文件位置可能稍有不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、创建shell脚本&lt;figure class=&quot;h
      
    
    </summary>
    
    
      <category term="opnwrt" scheme="http://yoursite.com/tags/opnwrt/"/>
    
      <category term="自定义指令" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>linux下使用crontab运行Python脚本的坑</title>
    <link href="http://yoursite.com/2019/08/26/linux%E4%B8%8B%E4%BD%BF%E7%94%A8crontab%E8%BF%90%E8%A1%8CPython%E8%84%9A%E6%9C%AC%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2019/08/26/linux下使用crontab运行Python脚本的坑/</id>
    <published>2019-08-26T12:34:10.000Z</published>
    <updated>2019-08-26T12:41:56.243Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Python脚本实现DDNS功能时发现并没有定时运行,在指令后面添加 <code>&gt;/dev/null 2&amp;&gt;1</code><br>指令，发现如下报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00-18-01</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/home/c2/DDNS/run.py&quot;, line 21, in &lt;module&gt;</span><br><span class="line">    import requests</span><br><span class="line">ImportError: No module named requests</span><br></pre></td></tr></table></figure><p>脚本单独运行是正常的，但是已使用Crontab后运行异常，再一番Google后发现，是Crontab不能正确加载Python的环境变量导致，需要做如下修改：</p><ul><li><p>1 直接执行Python所在路径，路径可以使用whereis python 指令来获取，所以我的指令是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/python3.6 #此处必须指定使用的python版本，不然报错</span><br><span class="line">`</span><br></pre></td></tr></table></figure></li><li><p>2 使用绝对路径</p></li></ul><p><code>/usr/bin/python3.6 /path/to/your/py/run.py</code><br>包括脚本需要指定的参数包含路径的，都必须使用绝对路径</p><p>以上就是我在使用crontab实现计划任务时的遇到的问题和解决方法，希望能对你有所帮助</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用Python脚本实现DDNS功能时发现并没有定时运行,在指令后面添加 &lt;code&gt;&amp;gt;/dev/null 2&amp;amp;&amp;gt;1&lt;/code&gt;&lt;br&gt;指令，发现如下报错&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="crontab" scheme="http://yoursite.com/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu Server 输入sudo 指令不使用密码</title>
    <link href="http://yoursite.com/2019/08/26/Ubuntu-Server-%E8%BE%93%E5%85%A5sudo-%E6%8C%87%E4%BB%A4%E4%B8%8D%E4%BD%BF%E7%94%A8%E5%AF%86%E7%A0%81/"/>
    <id>http://yoursite.com/2019/08/26/Ubuntu-Server-输入sudo-指令不使用密码/</id>
    <published>2019-08-26T12:31:10.000Z</published>
    <updated>2019-08-26T12:42:00.903Z</updated>
    
    <content type="html"><![CDATA[<p>sudo 指令在使用过程中需要反复输入密码，显得很麻烦，自然要取消这恼人的设定啊，哈哈哈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/sudoers .      # 备份默认配置到当前文件夹</span><br><span class="line">sudo -i                     # 切换到root用户</span><br><span class="line">visudo                      # 编辑sudo 配置文件，也可以用vi /etc/sudoers,不过使用vim编辑会提示不能保存只读文件</span><br></pre></td></tr></table></figure><p>接下来就时修改配置，找到 </p><p><code>root　　ALL=(ALL:ALL) ALL</code></p><p>在下边添加类似的一行,Your_Name是你要免密登陆的用户名</p><p><code>Your_Name = ALL=(ALL:ALL) NOPASSWD: ALL</code></p><p>接着将</p><p><code>%sudo ALL=(ALL:ALL) ALL</code> </p><p>修改为</p><p><code>%sudo ALL=(ALL:ALL) NOPASSWD: ALL</code></p><p>保存后退出重新登陆，使用 sudo ls测试就会发现不需要输入密码了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;sudo 指令在使用过程中需要反复输入密码，显得很麻烦，自然要取消这恼人的设定啊，哈哈哈&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="sudo" scheme="http://yoursite.com/tags/sudo/"/>
    
      <category term="不输入密码" scheme="http://yoursite.com/tags/%E4%B8%8D%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt 挂载局域网SAMBA共享文件夹</title>
    <link href="http://yoursite.com/2019/08/26/OpenWrt-%E6%8C%82%E8%BD%BD%E5%B1%80%E5%9F%9F%E7%BD%91SAMBA%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>http://yoursite.com/2019/08/26/OpenWrt-挂载局域网SAMBA共享文件夹/</id>
    <published>2019-08-26T12:26:33.000Z</published>
    <updated>2019-08-26T12:42:04.531Z</updated>
    
    <content type="html"><![CDATA[<p>OpenWrt在挂载局域网共享文件夹可以有效减少磁盘空间占用，实现无限扩容的可能，在操作中踩了不少坑，所以记录下来：</p><h1 id="操作指令"><a href="#操作指令" class="headerlink" title="操作指令"></a>操作指令</h1><p>首先安装相关套件cifsmount<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update         # 更新软件列表</span><br><span class="line">opkg install cifsmount          # 安装cifsmount</span><br></pre></td></tr></table></figure></p><p>没有报错即为成功</p><h1 id="挂载文件夹"><a href="#挂载文件夹" class="headerlink" title="挂载文件夹"></a>挂载文件夹</h1><p>此处挂载局域网192.168.1.40的share文件夹到 OpenWrt中的/root/shar文件夹</p><figure class="highlight plain"><figcaption><span>//192.168.1.40/share</span><a href="/root/share">-o user</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">因为OpenWrt的mount命令版本比较低，此处的 vers=1.0是必须的,sec=ntlm也是必须的加密选项，不过需要根据网络不同配置不同的加密选项</span><br><span class="line"># 取消挂载</span><br><span class="line">如果想取消挂载，仅需要取消取消挂载点就可以了</span><br><span class="line">```umount /root/share</span><br></pre></td></tr></table></figure><h1 id="期间碰到的坑："><a href="#期间碰到的坑：" class="headerlink" title="期间碰到的坑："></a>期间碰到的坑：</h1><p><code>mount error(22): Invalid argumentRefer to the mount.cifs(8) manual page (e.g. man mount.cifs)</code></p><p>意思为参数错误，原因是后面的 user=your_name,pass=your_password 后面没有添加 vers=1.0,sec=ntlm</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;OpenWrt在挂载局域网共享文件夹可以有效减少磁盘空间占用，实现无限扩容的可能，在操作中踩了不少坑，所以记录下来：&lt;/p&gt;
&lt;h1 id=&quot;操作指令&quot;&gt;&lt;a href=&quot;#操作指令&quot; class=&quot;headerlink&quot; title=&quot;操作指令&quot;&gt;&lt;/a&gt;操作指令&lt;/h1
      
    
    </summary>
    
    
      <category term="openwrt" scheme="http://yoursite.com/tags/openwrt/"/>
    
      <category term="smb" scheme="http://yoursite.com/tags/smb/"/>
    
  </entry>
  
  <entry>
    <title>UBUNTU+Apache2 强制开启https访问的方法</title>
    <link href="http://yoursite.com/2019/08/26/UBUNTU-Apache2-%E5%BC%BA%E5%88%B6%E5%BC%80%E5%90%AFhttps%E8%AE%BF%E9%97%AE%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/08/26/UBUNTU-Apache2-强制开启https访问的方法/</id>
    <published>2019-08-26T12:19:02.000Z</published>
    <updated>2019-08-26T12:25:35.015Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Let’s encrypt 申请下来的免费证书在简单设置以后，还需要进行简单设置才能实现强制HTTPS访问，以下是使用 .htaccess 的方法来实现：</p><h1 id="1-使能-htaccess-文件"><a href="#1-使能-htaccess-文件" class="headerlink" title="1. 使能 .htaccess 文件"></a>1. 使能 .htaccess 文件</h1><p><code>sudo vi /etc/apache2/apache2.conf</code></p><p>找到以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory /var/www/&gt;</span><br><span class="line">        Options Indexes FollowSymLinks</span><br><span class="line">        AllowOverride all</span><br><span class="line">        Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></p><p>确认 AllowOverride all 这行是这样就可以了,保存后输入以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod rewrite </span><br><span class="line">sudo a2enmod headers </span><br><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure></p><p>命令作用：打开重定位功能并重启apache2</p><h1 id="2-修改-htaccess-文件"><a href="#2-修改-htaccess-文件" class="headerlink" title="2. 修改.htaccess 文件"></a>2. 修改.htaccess 文件</h1><p>输入<br><code>sudo vi /var/www/html/你的网站根目录/.htaccess</code></p><p>找到以下内容<br>RewriteEngine On<br>在下面输入如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RewriteCond  %&#123;HTTPS&#125; !=on                          # 重定位规则：如果不是HTTPS</span><br><span class="line">RewriteRule  ^(.*) https://%&#123;SERVER_NAME&#125;$1 [L,R]   # 执行操作：跳转使用https访问</span><br></pre></td></tr></table></figure></p><p>如上就是强制HTTPS访问的方法了，希望对你有帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用Let’s encrypt 申请下来的免费证书在简单设置以后，还需要进行简单设置才能实现强制HTTPS访问，以下是使用 .htaccess 的方法来实现：&lt;/p&gt;
&lt;h1 id=&quot;1-使能-htaccess-文件&quot;&gt;&lt;a href=&quot;#1-使能-htaccess-文件
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu+apache2 网站添加用户访问验证</title>
    <link href="http://yoursite.com/2019/08/26/Ubuntu+apache2%20%E7%BD%91%E7%AB%99%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AE%E9%AA%8C%E8%AF%81/"/>
    <id>http://yoursite.com/2019/08/26/Ubuntu+apache2 网站添加用户访问验证/</id>
    <published>2019-08-26T12:14:08.000Z</published>
    <updated>2019-08-26T12:18:15.116Z</updated>
    
    <content type="html"><![CDATA[<p>在一些比较特殊的网站需要添加用户验证的功能，下面是使用.htaccess文件的方法实现用户验证</p><h1 id="1-安装apache-utils"><a href="#1-安装apache-utils" class="headerlink" title="1. 安装apache-utils"></a>1. 安装apache-utils</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install apache2-utils</span><br></pre></td></tr></table></figure><h1 id="2-生成-htpasswd-文件"><a href="#2-生成-htpasswd-文件" class="headerlink" title="2. 生成 .htpasswd 文件"></a>2. 生成 .htpasswd 文件</h1><p>推荐在网站根目录下生成.htpasswd 文件保存密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch /var/www/html/网站根目录/.htpasswd             # 生成 .htpasswd 文件</span><br><span class="line">sudo htpasswd -c /var/www/html/网站根目录/.htpasswd  验证用户名</span><br></pre></td></tr></table></figure></p><p>验证用户名需要自行修改，重复两次后完成密码生成</p><h1 id="3-使能-htaccess-文件"><a href="#3-使能-htaccess-文件" class="headerlink" title="3. 使能 .htaccess 文件"></a>3. 使能 .htaccess 文件</h1><p><code>sudo vi /etc/apache2/apache2.conf</code><br>找到以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory /var/www/&gt;</span><br><span class="line">        Options Indexes FollowSymLinks</span><br><span class="line">        AllowOverride all</span><br><span class="line">        Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></p><p>确认 AllowOverride all 这行是这样就可以了,保存后输入以下命令</p><p><code>sudo service apache2 restart</code><br>命令作用：重启apache2</p><h1 id="4-修改-htaccess-文件"><a href="#4-修改-htaccess-文件" class="headerlink" title="4. 修改.htaccess 文件"></a>4. 修改.htaccess 文件</h1><p>在.htaccess 文件的最后加入如下内容：</p><p>AuthType Basic<br>AuthName “Restricted Content”<br>AuthUserFile /var/www/html/网站根目录/.htpasswd<br>Require valid-user<br>保存后退出</p><h1 id="5-验证"><a href="#5-验证" class="headerlink" title="5. 验证"></a>5. 验证</h1><p>直接访问网站，会弹出验证验证信息：<br><img src="https://wp.aragon.wang/wp-content/uploads/2018/11/password_prompt.png" alt><br>如果验证错误会出现如下信息：<br><img src="https://wp.aragon.wang/wp-content/uploads/2018/11/unauthorized_error.png" alt></p><p>以上就是apache2 添加用户验证的方法，希望对你有帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在一些比较特殊的网站需要添加用户验证的功能，下面是使用.htaccess文件的方法实现用户验证&lt;/p&gt;
&lt;h1 id=&quot;1-安装apache-utils&quot;&gt;&lt;a href=&quot;#1-安装apache-utils&quot; class=&quot;headerlink&quot; title=&quot;1. 安装
      
    
    </summary>
    
    
      <category term="apache" scheme="http://yoursite.com/tags/apache/"/>
    
      <category term="验证" scheme="http://yoursite.com/tags/%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt 设置静态路由实现跨网段访问</title>
    <link href="http://yoursite.com/2019/08/26/OpenWrt-%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E8%B7%A8%E7%BD%91%E6%AE%B5%E8%AE%BF%E9%97%AE/"/>
    <id>http://yoursite.com/2019/08/26/OpenWrt-设置静态路由实现跨网段访问/</id>
    <published>2019-08-26T12:00:36.000Z</published>
    <updated>2019-08-26T12:10:23.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>由于软路由无线功能实在弟弟，只能使用无线路由作为AP使用，实际使用中发现光是作为旁路路由的话，如果软路由挂了（升级维护重启之类的），无线路由下挂的所有路由均会导致网关指向路由，需要重新启动wifi才能上网，如果使用智能家居设备的话非常麻烦，所以使用无线路由nat是最好的方法。<br><img src="https://wp.aragon.wang/wp-content/uploads/2019/03/1.png" alt></p><p>如图，正常情况下，路由器B作为nat,所以下面的设备可以访问路由器A上的资源，而路由A下面的设备不能访问路由B下面的设备，要怎么办呢？</p><p>解决方法<br>很简单，在路由A设置一个静态路由即可实现。设置方法如下：<br><img src="https://wp.aragon.wang/wp-content/uploads/2019/03/设置静态路由.png" alt></p><p>这样就可以很方便的让路由A访问路由下的资源，且路由A扑街后也不影响路由B下的设备状态。</p><p><font size="6" color="red">路由B一定要开启相应的防火墙规则</font><br></p><p><font size="6" color="red">路由B一定要开启相应的防火墙规则</font><br></p><p><font size="6" color="red">路由B一定要开启相应的防火墙规则</font><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h1&gt;&lt;p&gt;由于软路由无线功能实在弟弟，只能使用无线路由作为AP使用，实际使用中发现光是作为旁路路由的话，如果软路由挂了（升级维护重启之类的），无线路由
      
    
    </summary>
    
    
      <category term="openwrt" scheme="http://yoursite.com/tags/openwrt/"/>
    
      <category term="跨网段访问" scheme="http://yoursite.com/tags/%E8%B7%A8%E7%BD%91%E6%AE%B5%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt 使用PY脚本实现DDNS</title>
    <link href="http://yoursite.com/2019/08/26/OpenWrt-%E4%BD%BF%E7%94%A8PY%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0DDNS/"/>
    <id>http://yoursite.com/2019/08/26/OpenWrt-使用PY脚本实现DDNS/</id>
    <published>2019-08-26T07:57:08.000Z</published>
    <updated>2019-08-26T11:11:49.202Z</updated>
    
    <content type="html"><![CDATA[<p>虽然KoolShare OpenWrt 有自带的DDNS功能，但不能实现多域名解析和对IPv6 的DDNS有问题，在找了一圈后，发现NewFuture大佬的DDNS十分好用，遂有以下记录。<br>脚本链接：<br>自动更新域名解析到本机IP(支持dnspod,阿里DNS,CloudFlare,DNSCOM…)</p><h1 id="下载脚本"><a href="#下载脚本" class="headerlink" title="下载脚本"></a>下载脚本</h1><p><code>git clone https://github.com/NewFuture/DDNS.git</code></p><p>从GitHub上直接复制下来，简单方便，会在root路径下出现DDNS文件夹</p><h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><p><code>vi /root/DDNS/config.json</code></p><p>按“i”键开始输入，光标移动修改，下面以阿里DDNS为例:<br></p><p><font color="#660000" size="6">里面的注释信息请勿复制进脚本</font><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">      &quot;debug&quot;: &quot;false&quot;,            # 调试模式，解析时会输出更多信息</span><br><span class="line">      &quot;dns&quot;: &quot;alidns&quot;,             # 选择DNS服务提供商，&quot;dnspod 或 dnspod_com 或 alidns 或 dnscom 或 cloudflare&quot;均可</span><br><span class="line">      &quot;id&quot;: &quot;your ID&quot;,         # 从阿里云获取的Access Key ID</span><br><span class="line">      &quot;token&quot;: &quot;your Secret&quot;,  #从阿里云获取的Access Key Secret</span><br><span class="line">      &quot;index4&quot;: &quot;default&quot;,         # IPv4解析方式，一般使用Default即可满足要求，不成功则需要访问Git地址上设置别的值</span><br><span class="line">      &quot;index6&quot;: &quot;default&quot;,         # IPv6解析方式，一般使用Default即可满足要求，不成功则需要访问Git地址上设置别的值</span><br><span class="line">      &quot;ipv4&quot;: [&quot;your.domain.com&quot;,  # IPv4解析域名组</span><br><span class="line">              &quot;your.domain.com&quot;],</span><br><span class="line">      &quot;ipv6&quot;: [&quot;your.domain.com&quot;,  # IPv6解析域名组</span><br><span class="line">               &quot;your.domain.com&quot;],</span><br><span class="line">     &quot;proxy&quot;: null         # 不使用代理</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>键入“ESC” 退出编辑，输入”:wq”保存配置并退出。</p><h1 id="添加计划任务"><a href="#添加计划任务" class="headerlink" title="添加计划任务"></a>添加计划任务</h1><p>进入OpenWrt后台，找到 系统-计划任务，在右边文本框输入以下内容：</p><p><em>/5 </em> <em> </em> * /root/DDNS/run.py -c config.json<br>意思是每5分钟更新一次DDNS信息，如果重复不会覆盖。有需要可以修改5来增减解析间隔时间。</p><p>以上就是利用NewFuture大佬的DDNS脚本在OpenWrt上实现多域名解析的方法，希望对你有所帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然KoolShare OpenWrt 有自带的DDNS功能，但不能实现多域名解析和对IPv6 的DDNS有问题，在找了一圈后，发现NewFuture大佬的DDNS十分好用，遂有以下记录。&lt;br&gt;脚本链接：&lt;br&gt;自动更新域名解析到本机IP(支持dnspod,阿里DNS,C
      
    
    </summary>
    
    
      <category term="openwrt" scheme="http://yoursite.com/tags/openwrt/"/>
    
      <category term="DDNS" scheme="http://yoursite.com/tags/DDNS/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
</feed>
